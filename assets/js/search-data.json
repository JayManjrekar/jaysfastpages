{
  
    
        "post0": {
            "title": "Title",
            "content": "public class CompOpsDemo { public public static void main(String[] args) { int x = 2; int y = 7; x++; y--; System.out.println(x); System.out.println(y); } } . | public public static void main(String[] args) { repeated modifier .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/practice.html",
            "relUrl": "/2023/04/05/practice.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Array List",
            "content": "import java.util.List; import java.util.ArrayList; List&lt;Integer&gt; myArrayList = new ArrayList(); int[] myArray = new int[3]; myArray[0] = 5; myArray[1] = 7; myArray[2] = 8; myArray[2] = 9; myArrayList.add(5); myArrayList.add(7); myArrayList.add(9); int aCount = myArray.length; int aListCount = myArrayList.size(); int secondNum = myArray[1]; int secondNumList = myArrayList.get(1); myArrayList.set(2, 9); System.out.println(myArray[1]); . 7 . import java.util.ArrayList; import java.util.Scanner; Scanner scan = new Scanner(System.in); System.out.println(&quot;What data do you want to remove? (Min, Mode, Median, Mean)&quot;); String dataInput = scan.nextLine(); ArrayList&lt;String&gt; stats = new ArrayList&lt;String&gt;(); stats.add(&quot;Min&quot;); stats.add(&quot;Mode&quot;); stats.add(&quot;Median&quot;); stats.add(&quot;Mean&quot;); System.out.println(stats); if(dataInput.equals(&quot;Min&quot;)){ stats.remove(&quot;Min&quot;); }else if(dataInput.equals(&quot;Mode&quot;)){ stats.remove(&quot;Mode&quot;); } else if(dataInput.equals(&quot;Median&quot;)){ stats.remove(&quot;Median&quot;); }else if(dataInput.equals(&quot;Mean&quot;)){ stats.remove(&quot;Mean&quot;); } for (int i = 0; i &lt; stats.size(); i++) { System.out.println(stats.get(i)); } . What data do you want to remove? (Min, Mode, Median, Mean) [Min, Mode, Median, Mean] Mode Median Mean . public class Droid{ String name; int batteryLevel; public Droid(String droidName){ batteryLevel = 100; //because batterylev is an instance field i can use it in this class } public static void main(String[] args){ Droid droid1 = new Droid(&quot;Codey&quot;); System.out.println(droid1); } } .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/arraylist.html",
            "relUrl": "/2023/04/05/arraylist.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "CB Unit 5",
            "content": "Object – characterized by state, attributes, and behavior. o Instance of a class ● All OOP (Object-Oriented Programming) languages try to represent an object as a variable or an instance in a program. ● Class – Defines another abstract data type in the program ● Object references o String variables ● Instance Variables o Attributes and behaviors o Hold data for objects ● Methods – Code for behaviors or any actions that apply to the objects. ● Constructors – Used to initialize the instance variables o When an object is created ● Main Methods – Used to test the class ● Instance variables o Attributes/behaviors o Fields o Properties . 2019 FRQ 2 . Write the complete StepTracker class, including the constructor and any required instance variables and methods. Your implementation must meet all specifications and conform to the example. . public class StepTracker { private int steps; private int minSteps; private int daysActive; private int daysTotals; public StepTracker(int minSteps){ this.minSteps = minSteps; steps = 0; daysActive = 0; daysTotals = 0; } public void addDailySteps(int newSteps) { steps += newSteps; daysTotals++; if(newSteps &gt;= minSteps){ daysActive++; } } public int activeDays(){ return daysActive; } public double averageSteps(){ if(daysTotals == 0){ return 0; } return (double)steps / (double) daysTotals; } } .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/Unit5Writing-Classes.html",
            "relUrl": "/2023/04/05/Unit5Writing-Classes.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "CB FRQ Unit 2",
            "content": "Unit 2 Notes . Objects: Instances of Classes -Object – characterized by state, attributes, and behavior. . Instance of a class | All OOP (Object-Oriented Programming) languages try to represent an object as a variable or an instance in a program. | Class – Software blueprint o Implement Objects of a specific data type | Data fields – o Also known as instance variables o Methods | Provide behaviors of the object ▪ Provide operations which manipulate the object | Encapsulation – Combining data and method into a single unit | Public o Class declaration which suggests that the class can be used by all client programs o Public methods – any client program can access these methods Objects: Instances of Classes (continued) | . Part A . Write the WordMatch method scoreGuess. To determine the score to be returned, scoreGuess finds the number of times that guess occurs as a substring of secret and then multiplies that number by the square of the length of guess. Occurrences of guess may overlap within secret. . public int scoreGuess(String guess) { int count = 0; for(int i = 0; i &lt; secret.length(); i++) { int j = i + guess.length(); if(j &lt;= secret.length() &amp;&amp; secret.substring(i, j).equals(guess)) count++; } return count * (guess.length() * guess.length()); } . Since we are given on the table that we need to return the result times length of the guess squared. Then we can see that we need to loop over the entire secret word to see how many times guess ours in secret.secret signifies i and j signifies guess. We create a 2D array. If guess is at the beginning of subset then we would add to the count . Part B . Write the WordMatch method findBetterGuess, which returns the better guess of its two String parameters, guess1 and guess2. If the scoreGuess method returns different values for guess1 and guess2, then the guess with the higher score is returned. If the scoreGuess method returns the same value for guess1 and guess2, then the alphabetically greater guess is returned. . public String findBetterGuess(String guess1, String guess2) { int score1 = scoreGuess(guess1); int score2 = scoreGuess(guess2); if(score1 &gt; score2) return guess1; else if(score2 &gt; score1) return guess2; else { if(guess1.compareTo(guess2) &gt; 0) return guess1; else return guess2; } } . We have to use scoreGuess and use the method for part B. Then I am using a conditional if score 1 is greater than score 2, then I will return guess 1. If score 2 is greater than score1 then I return guess2. ComparedTo means that if the first one is greater than other one then I would return a positive number. If guess 1 is alpabetically bigger than I would return guess 1 otherwise I would return guess 2. .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/Unit2FRQ.html",
            "relUrl": "/2023/04/05/Unit2FRQ.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 6",
            "content": "Array Creation and Access . Arrays represent groups of related data all of the identical data type. | The size of an array is established when created and cannot be modified. | Arrays can store either primitive data or object reference data. | When an array is created using the keyword new, all of its elements are initialized with a specific value based on the type of elements: | Elements of type int are initialized to 0 | Elements of type double are initialized to 0.0 | Elements of type boolean are initialized to false | Elements of a reference type are initialized to the reference value null. No objects are automatically created. | Square brackets ([ ]) are utilized to get to and adjust a component in an Array utilizing a list. The indexed value, for instance array[index], can be utilized anywhere a normal variable can be utilized, for instance to get or assign any values or variables. | The valid index values for an array are 0 through one less than the size of the array. Utilizing a record and index value outside of this range will give you an ArrayIndexOutOfBoundsException. Traversing Arrays | Iteration (loops) can be utilized to get to all the components in an array, traversing through the array. | Traversing an array with an indexed for loop or while loop expects components to be accessed with their indices. public class OffByone | . Hack 1 . import java.util.Arrays; int[] arrayOne = {1, 3, 5, 7, 9}; for (int i = 0; i&lt;arrayOne.length;i++) { if (arrayOne[i] % 2 == 0) { System.out.println(arrayOne[i] + &quot; &quot;); } } . Hack 2 . Which of the following is FALSE about arrays . A. A java array is an object | B. Length of array can be changed after creation of array | C. Numerical data types of arrays are initialized to 0 to start | . The answer is B . APCSA 2021 Question 3 . A high school club maintains information about its members in a MemberInfo object. A MemberInfo object stores a club member’s name, year of graduation, and whether or not the club member is in good standing. A member who is in good standing has fulfilled all the responsibilities of club membership. . A partial declaration of the MemberInfo class is shown below. . public class MemberInfo { / Constructs a MemberInfo object for the club member with name name, graduation year gradYear, and standing hasGoodStanding. / public MemberInfo(String name, int gradYear, boolean hasGoodStanding) { / implementation not shown */ } / Returns the graduation year of the club member. / public int getGradYear() { / implementation not shown / } /** Returns true if the member is in good standing and false otherwise. / public boolean inGoodStanding() { / implementation not shown / } // There may be instance variables, constructors, and methods that are not shown. } | . | The ClubMembers class maintains a list of current club members. The declaration of the ClubMembers class is shown below. . public class ClubMembers { private ArrayList memberList; / Adds new club members to memberList, as described in part (a). Precondition: names is a non-empty array. / public void addMembers(String[] names, int gradYear) { / to be implemented in part (a) */ } / Removes members who have graduated and returns a list of members who have graduated and are in good standing, as described in part (b). / public ArrayList removeMembers(int year) { /&lt;/em&gt; to be implemented in part (b) */ } // There may be instance variables, constructors, and methods that are not shown. } &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; public void addMembers(String[] names, int gradYear) { for (String n : names) { MemberInfo newM = new MemberInfo (n, gradYear, true); memberList.add(newM); } } . &lt;/div&gt; | . | .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/Unit-6.html",
            "relUrl": "/2023/04/05/Unit-6.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 4",
            "content": "while Loops and for Loops . for loop vs. while loop | for loops repeat for a range of values | while loops repeat when a condition is true/met | for loops have a start value for the loop variables | for loop can be best when you know how many times to repeat the code | while loops can be best when you don’t know how many times to repeat the code | Similarities between for loops and while loops | Repeats code | Loop stops once the condition is false ● Example of a while loop public class Test { public static void main(String[] args) { int x = 10; while (x &gt; 0) { System.out.println(x); x = x - 2; } } } while Loops and for Loops (continued) ● Example of a for loop | . // import required classes and package, if any import java.util.Scanner; // create class CaesarCipherExample for encryption and decryption public class CaesarCipherExample { // ALPHABET string denotes alphabet from a-z public static final String ALPHABET = &quot;abcdefghijklmnopqrstuvwxyz&quot;; // create encryptData() method for encrypting user input string with given shift key public static String encryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // encryptStr to store encrypted data String encryptStr = &quot;&quot;; } } CaesarCipherExample.main(null) . Still working on this IT IS CHALLENGING! .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/Unit-4-FRQ.html",
            "relUrl": "/2023/04/05/Unit-4-FRQ.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 3",
            "content": "An if statement tells the computer that if a condition is true, then it should execute the block of code within the function. . Most basic control flow statement | If it’s false, the computer should skip the code and continue with the rest of the program. | Control flow statements | Can modify or break the flow of the execution -Implementing decision making | Looping | Branching program | To execute certain blocks of code in your program. -Switch statements | Can test a range of values | Can use these statements if the if-else chain is too long. | Three types of control flow supported by Java | Decision making statements | if – then ▪ if – then – else o Looping statements ▪ for ▪ while ▪ do-while o Branching statements ▪ break ▪ return ▪ continue if-else Statements ● if-else statements | If the condition is true, the computer executes the block of code but if the condition is false, the computer executes the else action. | Will always take some action because the condition has to be either true or false (not in the middle). o Optional else statement ▪ Alternate path if the boolean value might be false else-if Statements ● if-else-if statements o In Java, once a block of code is executed, it doesn’t check for the other else-if conditions ▪ Breaks the loop | . Question 2 . import java.util.*; public class Quadratic { public static void main (String[] args) { Scanner sc = new Scanner(System.in); double a = sc.nextDouble(); System.out.println(a); double b = sc.nextDouble(); System.out.println(b); double c = sc.nextDouble(); System.out.println(c); double quadratic1 = (-1*b + Math.sqrt(b*b-4*a*c))/2*a; double quadratic2 = (-1*b - Math.sqrt(b*b-4*a*c))/2*a; System.out.println(quadratic1 + &quot; or &quot; + quadratic2); } } Quadratic.main(null); . Question 4 . import java.util.*; public class Sign { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Input number - &quot;); double input = sc.nextDouble(); System.out.println(input); if (input &lt; 0) { System.out.println(&quot;Negative&quot;); } else if (input &gt; 0) { System.out.println(&quot;Positive&quot;); } else { System.out.println(0); } } } Sign.main(null); . Question 6 . import java.util.*; public class Round { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Input number - &quot;); double input1 = sc.nextDouble(); System.out.println(input1); System.out.print(&quot;Input number - &quot;); double input2 = sc.nextDouble(); System.out.println(input2); input1 = Math.round(input1 * Math.pow(10, 3)) / Math.pow(10, 3); input2 = Math.round(input2 * Math.pow(10, 3)) / Math.pow(10, 3); if (input1 == input2) { System.out.println(&quot;They are the same&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Round.main(null); . Question 8 . import java.util.*; public class Letter { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.print(&quot;Input character - &quot;); String input1 = sc.next(); System.out.println(input1); if (input1.equals(&quot;a&quot;) || input1.equals(&quot;e&quot;) || input1.equals(&quot;i&quot;) || input1.equals(&quot;o&quot;) || input1.equals(&quot;u&quot;) || input1.equals(&quot;y&quot;)) { System.out.println(&quot;Character is a vowel&quot;); } else { System.out.println(&quot;Character is a consonant&quot;); } } } Letter.main(null); . Question 10 . public class Natural { public static void main (String[] args) { System.out.print(&quot;The first 10 natural numbers :&quot;); System.out.println(&quot; &quot;); for(int num = 1; num &lt; 11; num++) { System.out.println(&quot;Enter&quot;) System.out.println(num); int input = sc.nextInt(); } } } Natural.main(null); . Question 12 . import java.util.*; public class Mean { public static void main (String[] args) { int n=0; int s=0; int average = 0; System.out.println(&quot;Input number :&quot;); for (int i = 0; i &lt; 5; i++) { Scanner sc = new Scanner(System.in); n = sc.nextInt(); System.out.println(n); s += n; } average = s/5; System.out.println(&quot;Sum is &quot; + s); System.out.println(&quot;Average is &quot; + average); } } Mean.main(null); . Question 14 . import java.util.*; public class Multiplication { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Input number :&quot;); int input = sc.nextInt(); int product = 0; for (int i = 0; i &lt; 6; i++) { product = input * i; System.out.println(input + &quot;*&quot; + i + &quot;=&quot; + product); } } } Multiplication.main(null); . Question 16 . import java.util.*; public class Pyramid { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter input for number of rows&quot;); int input = sc.nextInt(); for (int i = 0; i &lt; input; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(j); } System.out.println(&quot; &quot;); } } } Pyramid.main(null); . Question 18 . import java.util.*; public class Triangle { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter input for number of rows&quot;); int input = sc.nextInt(); int k = 1; for (int i = 1; i &lt; input; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(k++); } System.out.println(&quot; &quot;); } } } Triangle.main(null); . Question 20 . import java.util.*; public class Triangle2 { public static void main (String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Enter input for number of rows&quot;); int input = sc.nextInt(); int k = 1; for (int i = 1; i &lt; input; i++) { for (int j = 1; j &lt;= i; j++) { System.out.print(k++); System.out.print(&quot; &quot;); } System.out.println(&quot; &quot;); } } } Triangle2.main(null); . 2019 FRQ . 1A . public static int numberOfLeapYears(int year1, int year2) { int count = 0; for (int i = year1; i &lt;= year2; i++) { // add to count if year is leap year if (isLeapYear(i)) count++; } return count; } . 1B . public static int dayOfWeek(int month, int day, int year) { int day = firstDayOfYear(year) + dayOfYear(month, day, year) - 1; // only 7 days in a week return day % 7; } .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/Unit-3-FRQ.html",
            "relUrl": "/2023/04/05/Unit-3-FRQ.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Title",
            "content": "Selection Sort . public static void selectionSort(int[] myArray) { int n = myArray.length; // One by one move boundary of unsorted subarray for (int i = 0; i &lt; n-1; i++) { // Find the minimum element in unsorted array int minIndex = i; for (int j = i+1; j &lt; n; j++) if (myArray[j] &lt; myArray[minIndex]) minIndex = j; // Swap the found minimum element with the first element int temp = myArray[minIndex]; myArray[minIndex] = myArray[i]; myArray[i] = temp; } } int[] myArray = { 32, 15, 22, 23, 11 }; selectionSort(myArray); System.out.println(Arrays.toString(myArray)); // output: [11, 12, 22, 25, 64] . [11, 15, 22, 23, 32] . Hashmaps . import java.util.HashMap; public class PlayerHeightMap { public static void main(String[] args) { HashMap&lt;String, Integer&gt; playerHeightMap = new HashMap&lt;String, Integer&gt;(); // Add player names and heights to the map playerHeightMap.put(&quot;John&quot;, 180); playerHeightMap.put(&quot;Sarah&quot;, 165); playerHeightMap.put(&quot;Mike&quot;, 190); playerHeightMap.put(&quot;Emily&quot;, 175); // Print out the map System.out.println(&quot;Player height map: &quot; + playerHeightMap); // Retrieve the height of a player by name String playerName = &quot;Mike&quot;; if (playerHeightMap.containsKey(playerName)) { int playerHeight = playerHeightMap.get(playerName); System.out.println(playerName + &quot; is &quot; + playerHeight + &quot;cm tall.&quot;); } else { System.out.println(&quot;Unknown player: &quot; + playerName); } } } .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/.html",
            "relUrl": "/2023/04/05/.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Fibonacci",
            "content": "abstract class Parentfib { public void print(int count){ int[] fibNumbers = getfib(count); for(int i =0; i&lt;fibNumbers.length; i++){ System.out.println(fibNumbers[i]); } } abstract int[] getfib(int count); } . Recursion Loop . class Recurfib extends Parentfib{ public int[] getfib(int count){ } public static void main(String args[]){ int count=20; System.out.print(n1+&quot; &quot;+n2);//printing 0 and 1 printFibonacci(count-2);//n-2 because 2 numbers are already printed } } . For Loop . class forFib extends Parentfib{ int[] getfib(int count) { int[] fibonacciNumbers = new int[count+1]; int firstTerm = 0, secondTerm = 1; for (int i = 1; i &lt;= count; ++i) { // compute the next term int nextTerm = firstTerm + secondTerm; firstTerm = secondTerm; secondTerm = nextTerm; fibonacciNumbers[i] = firstTerm; } return fibonacciNumbers; } public static void main(){ forFib fibo = new forFib(); fibo.print(10); } } forFib.main(); . 0 1 1 2 3 5 8 13 21 34 55 . While Loop . class Whileloo { // Function to print N Fibonacci Number static void Fibonacci(int N) { int num1 = 0, num2 = 1; int counter = 0; // Iterate till counter is N while (counter &lt; N) { // Print the number System.out.print(num1 + &quot; &quot;); // Swap int num3 = num2 + num1; num1 = num2; num2 = num3; counter = counter + 1; } } // Driver Code public static void main(String args[]) { // Given Number N int N = 18; // Function Call Fibonacci(N); } } . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2023/04/05/09-26-fibonacci.html",
            "relUrl": "/2023/04/05/09-26-fibonacci.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Title",
            "content": "import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(&quot;What is your name?&quot;); String name = scanner.nextLine(); System.out.println(&quot;Hello &quot; + name); scanner.nextLine(); } } .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/12/21/2022.html",
            "relUrl": "/2022/12/21/2022.html",
            "date": " • Dec 21, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Title",
            "content": "2. This question involves reasoning about pairs of words that are represented by the following . public class WordPair { /** Constructs a WordPair object. */ public WordPair(String first, String second) { /* implementation not shown */ } /** Returns the first string of this WordPair object. */ public String getFirst() { /* implementation not shown */ } /** Returns the second string of this WordPair object. */ public String getSecond() { /* implementation not shown */ } } . You will implement the constructor and another method for the following WordPairList class. . public class WordPairList { /** The list of word pairs, initialized by the constructor. */ private ArrayList allPairs; /** Constructs a WordPairList object as described in part (a). Precondition: words.length &gt;= 2 */ public WordPairList(String[] words) { /* to be implemented in part (a) */ } /** Returns the number of matches as described in part (b). */ public int numMatches() { /* to be implemented in part (b) */ } } . Complete the WordPairList constructor below . public class WordPairList { public WordPairList(String[] words) { allPairs = new ArrayList&lt;WordPair&gt;(); for(int i = 0; i &lt; words.length; i++) for(int j = i + 1; j &lt; words.length; j++) allPairs.add(new WordPair(words[i], words[j])); } } . Complete method numMatches below. . public int numMatches() { int matches = 0; for(WordPair wp : allPairs) if(wp.getFirst().equals(wp.getSecond())) matches++; return matches; } .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/12/15/Unit7.html",
            "relUrl": "/2022/12/15/Unit7.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Vocab Units 1-5",
            "content": "Casting . Below, there are two examples of casting. Both examples convert a double data type to integer via truncation. 1.511 is outputted as 1 in the first line. 28.2 is printed as 28 in the second line. This can simplify the output and make it easier to operate on in future code as well. . double d1 = 6.53; double d2 = 4.32; // Casting for division int dd = (int) (d1/d2); // Casting for multiplication int md = (int) (d1*d2); System.out.println(dd); // output of division, is integer System.out.println(md); // output of multiplication, is integer . 1 28 . Wrapper Classes . Wrapper class allow the use of primitive data types like integers as classes, and therefore use methods and code that otherwise would not be allowed. Below, the toString method can not be used with the primitive, but works with the wrapper. . int i = 1; Integer ii = 1; // String unwrapped = i.toString(); String wrapped = ii.toString(); System.out.println(i); System.out.println(ii); . | String unwrapped = i.toString(); int cannot be dereferenced . Concatenation . Concatenation is combinining two or more strings. . String s1 = &quot;hello&quot;; String s2 = &quot;world&quot;; String conc = s1.concat(s2); System.out.println(s1+ &quot; &quot; + s2); System.out.println(conc); System.out.println(s1 + &quot; &quot; + s2 + &quot; &quot; + 12); . hello world helloworld hello world 12 . Math Class . Allows math operations. Absolute value and random. . int ex = -1; System.out.println(Math.abs(-1)); // random between 1 and 10 System.out.println((int)(Math.random() * (100-10) + 10)); System.out.println((Math.random() * (10-1) + 1)); . 1 27 2.393138714397412 . Compound Boolean Expression . Compound boolean expressions are when multiple boolean expressions are nested within each other. . boolean a = true; boolean b = false; System.out.println(!a &amp;&amp; !b); . false . Truth Tables . Help visualize compound boolean expressions and make it easier to evaluate. . DeMorgans Law . Make boolean expressions easier. . boolean a = true; boolean b = false; System.out.println(!(a&amp;&amp;b)); System.out.println(!a || !b); System.out.println(!(a||b)); System.out.println(!a &amp;&amp; !b); . true true false false .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/12/01/vocab.html",
            "relUrl": "/2022/12/01/vocab.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Vocabulary with Code Examples Part 4",
            "content": "Subclass constructor, super Keyword . Extending a class and then constructing the new extends class will call the constructor of the superclass. This is useful when you want to have a constructor that will call the constructor of the superclass. | . public class Superclass { public void printMethod() { System.out.println(&quot;Printed in Superclass.&quot;); } } public class Subclass extends Superclass { // overrides printMethod in Superclass public void printMethod() { super.printMethod(); System.out.println(&quot;Printed in Subclass&quot;); } public static void main(String[] args) { Subclass s = new Subclass(); s.printMethod(); } } Subclass.main(null); . Printed in Superclass. Printed in Subclass . Overloading a method, same name different parameters . In Java, two or more methods may have the same name if they differ in parameters (different number of parameters, different types of parameters, or both). These methods are called overloaded methods and this feature is called method overloading. | . // Overloading by changing the number of parameters class MethodOverloading { private static void display(int a){ System.out.println(&quot;Arguments: &quot; + a); } private static void display(int a, int b){ System.out.println(&quot;Arguments: &quot; + a + &quot; and &quot; + b); } public static void main(String[] args) { display(1); display(1, 4); } } MethodOverloading.main(null); . Arguments: 1 Arguments: 1 and 4 . Overriding a method, same signature of a method . Overriding is a feature that allows a subclass or child class to provide a specific implementation of a method that is already provided by one of its super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the method in the super-class. | . // method overriding in java // Base Class class Parent { void show() { System.out.println(&quot;Parent&#39;s show()&quot;); } } // Inherited class class Child extends Parent { // This method overrides show() of Parent @Override void show() { System.out.println(&quot;Child&#39;s show()&quot;); } } // Driver class class Main { public static void main(String[] args) { // If a Parent type reference refers // to a Parent object, then Parent&#39;s // show is called Parent obj1 = new Parent(); obj1.show(); // If a Parent type reference refers // to a Child object Child&#39;s show() // is called. This is called RUN TIME // POLYMORPHISM. Parent obj2 = new Child(); obj2.show(); } } Main.main(null); . Parent&#39;s show() Child&#39;s show() . Abstract Class, Abstract Method . Abstract class: is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class). | Abstract method: can only be used in an abstract class, and it does not have a body. The body is provided by the subclass (inherited from). | . //An abstract class can have both abstract and regular methods: abstract class Animal { public abstract void animalSound(); public void sleep() { System.out.println(&quot;Zzz&quot;); } } . Standard methods: . toString(): Used to convert an object into a string. | equals(): Useful for comparing two objects to see if they are equal | hashCode(): Useful for getting a unique hash code for an object. | . class toString { public static void main( String args[] ) { //Creating an integer of value 10 Integer number=10; // Calling the toString() method as a function of the Integer variable System.out.println( number.toString() ); } } toString.main(null) . 10 . String myStr1 = &quot;Karthik&quot;; String myStr2 = &quot;Evan&quot;; String myStr3 = &quot;Pranav&quot;; String myStr4 = &quot;Sanjay&quot;; String myStr5 = &quot;Jay&quot;; String myStr6 = &quot;Karthik&quot;; System.out.println(myStr1.equals(myStr6)); // Returns true because they are equal System.out.println(myStr1.equals(myStr4)); // false . true false . /* * Program Demonstrate hashcode() method of Method Class. */ import java.lang.reflect.Method; public class hashCode { // create a Method name getSampleMethod public void getSampleMethod() {} // create main method public static void main(String args[]) { try { // create class object for class name hashCode Class c = hashCode.class; // get Method object of method name getSampleMethod Method method = c.getDeclaredMethod(&quot;getSampleMethod&quot;, null); // get hashcode of method object using hashCode() method int hashCode = method.hashCode(); // Print hashCode with method name System.out.println(&quot;hashCode of method &quot; + method.getName() + &quot; is &quot; + hashCode); } catch (Exception e) { // print if any exception occurs e.printStackTrace(); } } } hashCode.main(null) . hashCode of method getSampleMethod is 49965842 . Late binding of object, referencing superclass object . Late binding is when you have allow the compiler to determine which method to use at runtime instead of compile time. | . public class lateBinding { public static class superclass { void print() { System.out.println(&quot;print in superclass.&quot;); } } public static class subclass extends superclass { @Override void print() { System.out.println(&quot;print in subclass.&quot;); } } public static void main(String[] args) { superclass A = new superclass(); superclass B = new subclass(); A.print(); B.print(); } } lateBinding.main(null) . print in superclass. print in subclass. . Polymorphism: any of overloading, overriding, late binding . Polymorphism is the ability to have multiple methods with the same name but different parameters. This is useful when you want to have multiple methods that do the same thing but with different parameters. This is also useful when you want to have a method that can take multiple types of parameters. | . abstract class Animal { public void distanceDriven() { System.out.println(&quot;Anima has walked 120 feet&quot;); } } class Dog extends Animal { public void distanceDriven() { System.out.println(&quot;The SUV has driven 70 feet&quot;); } } class Cat extends Animal { public void distanceDriven() { System.out.println(&quot;The truck has driven 60 feet&quot;); } } // Instantiating the Car class would throw an error as it is abstract Dog dog = new Dog(); Cat cat = new Cat(); dog.distanceDriven(); cat.distanceDriven(); . The SUV has driven 70 feet The truck has driven 60 feet . Big O notation for Hash map, Binary Search, Single loop, Nested Loop . Implementing Big O notation is useful for determining the efficiency of an algorithm. Making algorithms more efficient is useful for making programs compile and run faster and likely reduce the load of it, which could be especially good for websites where users may be runnning the same function through an api many times. | . class Main { public static void main(String[] args) { int a = 0, b = 0; int N = 4, M = 4; // This loop runs for N time for (int i = 0; i &lt; N; i++) { a = a + 10; } // This loop runs for M time for (int i = 0; i &lt; M; i++) { b = b + 40; } System.out.print(a + &quot; &quot; + b); } } Main.main(null) . 40 160 . Algorithm . An unambiguous, executable, and terminating specification of a way to solve a problem. . Abstraction . Breaking up a problem and hiding details to reduce the complexity of a task. . Accessor Method . A method that returns information but does not change the state of the program. . Ex: frontIsClear(), countMyBeepers(), facingWest() . Binary . A number system consisting of 0 and 1. . Bit . Binary digit; the smallest unit of information, having two possible values: 0 and 1. . Block . A group of statements bracketed by {}. . Byte . A number made up of eight bits. Essentially all currently manufactured computers use a byte as the smallest unit of storage in memory. . Camel Case . The preferred style of naming variables, where the first letter of every word after the first is capitalized. Ex: numBeepers, isAlive . Comment . An explanation to help the human reader understand a section of a program; ignored by the compiler. . Definite Loop . A loop that has a number of iterations set before the loop begins. Usually this is a for loop. . Hard Coding . Writing a program in such a way that its data and parameters are fixed and cannot be altered without modifying the program. . Ex: Making Karel follow an exact path to follow in a single specific maze, rather than teaching him how to navigate any maze. This is considered a bad practice. . Indefinite Loop . A loop that has an undetermined number of iterations when the loop begins. Usually this is a while loop. . Logic Error . An error in a syntactically correct program that causes it to act differently from its specification. . Ex: My program runs, but Karel crashes into a tree. . Logical Operator . An operator that can be applied to Boolean values. Processing has three logical operators: &amp;&amp;, ||, and ! . Method . A block of code that works toward a common purpose. Also known as functions. . Method Header . The top line of a method that includes a return type, name, and list of parameters. . Mutator Method . A method that changes the state of the program but does not return information. . Ex: move(), turnLeft(), putBeeper() . Parameter . An item of information that is specified to a method when the method is called. Used to “pass” information. For example, the method public void move(int distance) has a parameter distance of type int. . Processing . A programming language developed in 2001 that is based on Java. It has a focus on ease of use, education, and visual design. . Return Type . The type of data returned by a method back to the code that called it. A method that does not return any information has a return type of void. . Statement . A syntactical unit in a program, usually referring to a single line of code. . Syntax . Rules that define how to form instructions in a particular programming language. . Syntax Error . A mistake in code that violates the rules of a language&#39;s syntax, preventing the code from compiling. . Ex: My program won&#39;t run because my curly braces are a mess. .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/12/01/Vocab-Part-4-Code-Example.html",
            "relUrl": "/2022/12/01/Vocab-Part-4-Code-Example.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 1-5 Homework List",
            "content": "- Accessor Methods . A method called an accessor retrieves confidential information that is kept inside an object. An accessor offers a way for other program elements to access an object&#39;s state. . class Student { //Instance variable name private String name; /** getName() example * @return name */ public String getName() { return name; } public static void main(String[] args) { // To call a get method, use objectName.getVarName() Student s = new Student(); System.out.println(&quot;Name: MasterCoder &quot; + s.getName() ); } } Student.main(null) . Name: MasterCoder null . - Mutator Methods . A technique used to regulate changes to a variable is known as a mutator method. They&#39;re also frequently referred to as setter methods. A getter, often referred to as an accessor, frequently follows a setter and returns the value of the private member variable. . import java.math.BigDecimal; public class Product { private BigDecimal price; private String name; public BigDecimal getPrice() { return price; } public String getName() { return name; } // mutator or setter methods public void setPrice(BigDecimal price) { if(price.compareTo(BigDecimal.ZERO)&lt;0 )throw new IllegalArgumentException(&quot;Empty product name&quot;); this.price = price; } public void setName(String name) { if(name.isEmpty()) throw new IllegalArgumentException(&quot;Empty product name&quot;); this.name = name; } } . - Static, Class Variables . All instances of a class share static variables, which are variables. This implies that no matter how many instances of the same class of objects you create, changing a static variable or method will update it for all of them. This is helpful if you want to increment a counter for each instance of a class, for example. . class VariableDemo { static int count=0; public void increment() { count++; } public static void main(String args[]) { VariableDemo obj1=new VariableDemo(); VariableDemo obj2=new VariableDemo(); obj1.increment(); obj2.increment(); System.out.println(&quot;Obj1: count is=&quot;+obj1.count); System.out.println(&quot;Obj2: count is=&quot;+obj2.count); } } VariableDemo.main(null) . Obj1: count is=2 Obj2: count is=2 . public class VariableExample{ int myVariable; static int data = 30; public static void main(String args[]){ int a = 100; VariableExample obj = new VariableExample(); System.out.println(&quot;Value of instance variable myVariable: &quot;+obj.myVariable); System.out.println(&quot;Value of static variable data: &quot;+VariableExample.data); System.out.println(&quot;Value of local variable a: &quot;+a); } } VariableExample.main(null) . Value of instance variable myVariable: 0 Value of static variable data: 30 Value of local variable a: 100 . - Public, Private, Protected . public: available to everyone. protected: open to subclasses in any package as well as classes belonging to the same package. default, indicating that no modifiers are specified: accessible by classes belonging to the same package. private: only available to members of the same class. . public class Addition { public int addTwoNumbers(int a, int b){ return a+b; } } class Test{ public static void main(String args[]){ Addition obj = new Addition(); System.out.println(obj.addTwoNumbers(100, 1)); } } Test.main(null) . 101 . class Data { private String name; // getter method public String getName() { return this.name; } // setter method public void setName(String name) { this.name= name; } } public class Main { public static void main(String[] main){ Data d = new Data(); // access the private variable using the getter and setter d.setName(&quot;Mortensen&quot;); System.out.println(d.getName()); } } Main.main(null) . Mortensen . public class Addition { protected int addTwoNumbers(int a, int b){ return a+b; } } class Test extends Addition{ public static void main(String args[]){ Test obj = new Test(); System.out.println(obj.addTwoNumbers(11, 22)); } } . - Static, Class Methods . A static method is a method that is declared as a member of an object but can only be accessed from the constructor of an API object rather than from an instance of the object generated by the constructor. Class methods, on the other hand, are methods that are invoked on the class as a whole rather than on a single object instance. As a result, it falls under the class level, and the class method is shared by all class instances. A class method is linked to the class itself, not to any class objects. Only class variables are accessible to it. . public class StaticExample { public static int x; public static void main(String[] args) { x += 7; System.out.println(&quot;Add 7. Result: &quot; + x); } } StaticExample se = new StaticExample(); se.main(null); . Add 7. Result: 7 . - &quot;this Keyword&quot; . In a method or constructor, the &quot;this keyword&quot; refers to the current object. As a class attribute is shadowed by a method or constructor argument, the this keyword is most frequently used to clarify the differences between class attributes and parameters with the same name. . class A{ A(){ this(5); System.out.println(&quot;hello world&quot;); } A(int x){ System.out.println(x); } } class TestThis6{ public static void main(String args[]){ A a=new A(); }} . - &quot;main method&quot; . As the starting point for running a Java program, the main method in Java is typically the first method you encounter when learning how to program in Java. The main method can be located in any class that is a part of a program and can contain code to run or call other methods. . // Extends static example and modifies x value public class ExtendsExample extends StaticExample { public static void main(String[] args) { x += 10232; System.out.println(&quot;Add 10232. Result: &quot; + x); } } ExtendsExample ee = new ExtendsExample(); ee.main(null); . Add 10232. Result: 10239 . - Inherticance, Extends . It can inherit properties and methods from the class it is extending by using an extends method. When you want to alter or add to an existing class without having to completely rewrite the code for the class you are extending, this is helpful. . public class Cat extends Animal{ private String color; public Cat(boolean veg, String food, int legs) { super(veg, food, legs); this.color=&quot;White&quot;; } public Cat(boolean veg, String food, int legs, String color){ super(veg, food, legs); this.color=color; } public String getColor() { return color; } public void setColor(String color) { this.color = color; } } public class AnimalInheritanceTest { public static void main(String[] args) { Cat cat = new Cat(false, &quot;milk&quot;, 4, &quot;black&quot;); System.out.println(&quot;Cat is Vegetarian?&quot; + cat.isVegetarian()); System.out.println(&quot;Cat color is &quot; + cat.getColor()); } } AnimalInheritanceTest.main(null) . Cat is Vegetarian?false Cat color is black .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/homework/2022/12/01/Unit1-5-HW.html",
            "relUrl": "/homework/2022/12/01/Unit1-5-HW.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Title",
            "content": "ArrayList&lt;Integer&gt; num = new ArrayList &lt;Integer&gt; (); num.add(5); num.add(6); num.add(8); System.out.println(ArrayList); . | System.out.println(ArrayList); cannot find symbol symbol: variable ArrayList .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/11/30/hacks.html",
            "relUrl": "/2022/11/30/hacks.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Test Corrections MC 2014",
            "content": "Question 19 .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/markdown/2022/11/09/Test-Corrections-copy.html",
            "relUrl": "/markdown/2022/11/09/Test-Corrections-copy.html",
            "date": " • Nov 9, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Guide to getting a 5",
            "content": "Concepts I am Weak on . Parameters- I will watch college board videos and look at method exercises on leet code . Have to improve on making mental math and writing down steps. Start doing pseudocode . Read the problem carefully and take your time . INHERITANCE and constructors. I know that certain constructors can be private or public. . Mental Health/ Key Learning . When mental health is good, then you will be good at coding | Start practicing gratitude | Worry about learning NOT The grade | Only way to get better at coding is coding | .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/11/08/Howtoprepare.html",
            "relUrl": "/2022/11/08/Howtoprepare.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Making Dotplot Challenging",
            "content": "%%loadFromPOM &lt;dependency&gt; &lt;groupId&gt;jfree&lt;/groupId&gt; &lt;artifactId&gt;jfreechart&lt;/artifactId&gt; &lt;version&gt;1.0.13&lt;/version&gt; &lt;/dependency&gt; . import java.util.*; import java.io.*; import org.jfree.chart.ChartFactory; import org.jfree.chart.ChartPanel; import org.jfree.chart.JFreeChart; import org.jfree.chart.plot.XYPlot; import org.jfree.data.xy.XYDataset; import org.jfree.data.xy.XYSeries; import org.jfree.data.xy.XYSeriesCollection; import org.jfree.chart.plot.PlotOrientation; import org.jfree.chart.ChartUtilities; double[] data = {1, 1, 1, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7, 7, 8.5}; XYSeriesCollection newDataSet = new XYSeriesCollection(); XYSeries series2 = new XYSeries(&quot;MySeries&quot;); //add keys and values Map &lt;Double, Integer&gt; dataInputs = new HashMap&lt;&gt;(); for(int i=0; i&lt;data.length;i++){ if(dataInputs.containsKey(data[i])){ dataInputs.put(data[i], dataInputs.get(data[i])+1); } else { dataInputs.put(data[i],1); } series2.add(data[i], dataInputs.get(data[i])); } newDataSet.addSeries(series2); JFreeChart chart = ChartFactory.createScatterPlot( &quot;Boys VS Girls weight comparison chart&quot;, &quot;X-Axis&quot;, &quot;Y-Axis&quot;, newDataSet, PlotOrientation.VERTICAL, false, false, false); try { File outputFile = new File(&quot;dotplot.png&quot;); ChartUtilities.saveChartAsPNG(outputFile, chart, 500, 500); } catch (IOException e) { System.out.println(&quot;Error saving the chart&quot;); } .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/11/01/dotplot.html",
            "relUrl": "/2022/11/01/dotplot.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 4 Hw",
            "content": "import java.util.Scanner; // create class CaesarCipherExample for encryption and decryption public class CaesarCipherExample { // ALPHABET string denotes alphabet from a-z public static final String ALPHABET = &quot;abcdefghijklmnopqrstuvwxyz&quot;; // create encryptData() method for encrypting user input string with given shift key public static String encryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // encryptStr to store encrypted data String encryptStr = &quot;&quot;; // use for loop for traversing each character of the input string for (int i = 0; i &lt; inputStr.length(); i++) { // get position of each character of inputStr in ALPHABET int pos = ALPHABET.indexOf(inputStr.charAt(i)); // get encrypted char for each char of inputStr int encryptPos = (shiftKey + pos) % 26; char encryptChar = ALPHABET.charAt(encryptPos); // add encrypted char to encrypted string encryptStr += encryptChar; } // return encrypted string return encryptStr; } // create decryptData() method for decrypting user input string with given shift key public static String decryptData(String inputStr, int shiftKey) { // convert inputStr into lower case inputStr = inputStr.toLowerCase(); // decryptStr to store decrypted data String decryptStr = &quot;&quot;; // use for loop for traversing each character of the input string for (int i = 0; i &lt; inputStr.length(); i++) { // get position of each character of inputStr in ALPHABET int pos = ALPHABET.indexOf(inputStr.charAt(i)); // get decrypted char for each char of inputStr int decryptPos = (pos - shiftKey) % 26; // if decryptPos is negative if (decryptPos &lt; 0){ decryptPos = ALPHABET.length() + decryptPos; } char decryptChar = ALPHABET.charAt(decryptPos); // add decrypted char to decrypted string decryptStr += decryptChar; } // return decrypted string return decryptStr; } // main() method start public static void main(String[] args) { // create an instance of Scanner class Scanner sc = new Scanner(System.in); // take input from the user System.out.println(&quot;Enter a string for encryption using Caesar Cipher: &quot;); String inputStr = sc.nextLine(); System.out.println(&quot;Enter the value by which each character in the plaintext message gets shifted: &quot;); int shiftKey = Integer.valueOf(sc.nextLine()); System.out.println(&quot;Encrypted Data ===&gt; &quot;+encryptData(inputStr, shiftKey)); System.out.println(&quot;Decrypted Data ===&gt; &quot;+decryptData(encryptData(inputStr, shiftKey), shiftKey)); // close Scanner class object sc.close(); } } CaesarCipherExample.main(null) . Enter a string for encryption using Caesar Cipher: .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/23/Unit4.html",
            "relUrl": "/2022/10/23/Unit4.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Object Menu",
            "content": "What is a Class . A class is like an object constructor | Acts like a blue print | Has certain attributes and methods which can be called in other classes | . What is an Object . An object is part of a java class | It is typically described as an instance of a class | Inherits the attribute and methods that are within the class | . import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;4 - Array of Grades&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: int[] grades = {98,95,85,73}; for(int i = 0; i&lt;grades.length; i++){ System.out.println(grades[i]); } default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit 4 - Array of Grades - 4: 98 95 85 73 Unexpected choice, try again. .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/03/objectmenu.html",
            "relUrl": "/2022/10/03/objectmenu.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Images",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private final String greyDir = &quot;images/tmp/greyscale/&quot;; private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color (total, total, total); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color(red,green,blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // use scaled file vs original file in Class this.setStats() } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data blueImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;***&quot;; } else if (g &gt;= 170) { str = &quot;+++&quot;; } else if (g &gt;= 120) { str = &quot;^^^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&amp;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;888&quot;; } else if (g &gt;= 60) { str = &quot;###&quot;; } else { str = &quot;@@@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics sponge = new Pics(&quot;sponge&quot;, &quot;png&quot;); //sponge.greyscale(); // sponge.redscale(); sponge.greenscale(); sponge.bluescale(); // sponge.printStats(&quot;Original&quot;); // sponge.resize(33); // sponge.printStats(&quot;Scaled&quot;); sponge.convertToAscii(); } } Pics.main(null); . | this.setStats() &#39;;&#39; expected . import java.util.HashMap; public class Pets { // create a new HashMap HashMap&lt;String, Animal&gt; names = new HashMap&lt;&gt;(); /* Add Pets * */ public Pets() { // add some key-value pairs to the HashMap names.put(&quot;Leo&quot;, new Animal(&quot;Lion&quot;, 8, &quot;Gold&quot;)); names.put(&quot;Porky&quot;, new Animal(&quot;Pig&quot;, 3, &quot;Pink&quot;)); names.put(&quot;Ro-Ro&quot;, new Animal(&quot;Robin&quot;, 7, &quot;Red&quot;)); names.put(&quot;Midnight&quot;, new Animal(&quot;Cat&quot;, 10, &quot;Black&quot;)); names.put(&quot;Hobbes&quot;, new Animal(&quot;Kitty&quot;, 1, &quot;Calico&quot;)); names.put(&quot;Duke&quot;, new Animal(&quot;Dog&quot;, 14, &quot;Brown&quot;)); } /* Remove Pet * */ public Animal remove(String key) { // check if a key exists in the HashMap then remove Animal animal = null; if (names.containsKey(key)) { animal = names.get(key); names.remove(key); } return animal; } /* Print Pets * */ public void print() { // iterate over the keys in the HashMap for (String name: names.keySet()) { Animal obj = names.get(name); System.out.println(name + &quot; is a &quot; + obj.getColor() + &quot; &quot; + obj.getName() + &quot; and is &quot; + obj.getAge() + &quot; years old.&quot;); } System.out.println(); } /* Tester Method * */ public static void main(String[] args) { // intialize Pets Pets pets = new Pets(); pets.print(); // remove Pet Animal animal = pets.remove(&quot;Hobbes&quot;); if (animal == null) { System.out.println(key + &quot; not found&quot;); } else { System.out.println(&quot;Removed: &quot; + key + &quot;, &quot; + animal); } pets.print(); } } Pets.main(null); .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/02/images.html",
            "relUrl": "/2022/10/02/images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Rapid API",
            "content": "%maven org.json:json:20220924 import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Scanner; public class Soccer { public static void main(String[] args) throws IOException, InterruptedException { HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://soccer-transfers.p.rapidapi.com/en&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;39c4bf8c2emsh30b02ab6dc01dd9p13f427jsn690a650cf2ec&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;soccer-transfers.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); } } . Soccer.main(null); . [{&#34;date&#34;:&#34;16 /11 /2022&#34;,&#34;from&#34;:&#34;Palmeiras&#34;,&#34;time&#34;:&#34;09h12&#34;,&#34;to&#34;:&#34;Nottingham Forest&#34;,&#34;player&#34;:&#34;Gustavo Scarpa&#34;},{&#34;date&#34;:&#34;12 /11 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;21h32&#34;,&#34;to&#34;:&#34;Oldham Athletic&#34;,&#34;player&#34;:&#34;Sydie Peck&#34;},{&#34;date&#34;:&#34;12 /11 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;21h31&#34;,&#34;to&#34;:&#34;Boreham Wood&#34;,&#34;player&#34;:&#34;Kyron Gordon&#34;},{&#34;date&#34;:&#34;12 /11 /2023&#34;,&#34;from&#34;:&#34;Aston Villa&#34;,&#34;time&#34;:&#34;00h35&#34;,&#34;to&#34;:&#34;St. Louis City SC&#34;,&#34;player&#34;:&#34;Indiana Vassilev&#34;},{&#34;date&#34;:&#34;11 /11 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;12h18&#34;,&#34;to&#34;:&#34;Guiseley AFC&#34;,&#34;player&#34;:&#34;Callum Hiddlestone&#34;},{&#34;date&#34;:&#34;11 /11 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;12h12&#34;,&#34;to&#34;:&#34;Hyde United&#34;,&#34;player&#34;:&#34;Joe McGlynn&#34;},{&#34;date&#34;:&#34;08 /11 /2023&#34;,&#34;from&#34;:&#34;West Ham&#34;,&#34;time&#34;:&#34;02h33&#34;,&#34;to&#34;:&#34;Harrow Borough&#34;,&#34;player&#34;:&#34;Jacob Knightbridge&#34;},{&#34;date&#34;:&#34;07 /11 /2023&#34;,&#34;from&#34;:&#34;Southampton&#34;,&#34;time&#34;:&#34;13h16&#34;,&#34;to&#34;:&#34;AFC Bournemouth&#34;,&#34;player&#34;:&#34;Jack Stephens&#34;},{&#34;date&#34;:&#34;07 /11 /2023&#34;,&#34;from&#34;:&#34;Aston Villa&#34;,&#34;time&#34;:&#34;01h31&#34;,&#34;to&#34;:&#34;Stratford Town&#34;,&#34;player&#34;:&#34;Patrick Zito&#34;},{&#34;date&#34;:&#34;06 /11 /2023&#34;,&#34;from&#34;:&#34;Crystal Palace&#34;,&#34;time&#34;:&#34;15h49&#34;,&#34;to&#34;:&#34;Carshalton Athletic&#34;,&#34;player&#34;:&#34;Matthew Vigor&#34;},{&#34;date&#34;:&#34;06 /11 /2023&#34;,&#34;from&#34;:&#34;Leeds United&#34;,&#34;time&#34;:&#34;14h43&#34;,&#34;to&#34;:&#34;Curzon Ashton&#34;,&#34;player&#34;:&#34;Mitch Picksley&#34;},{&#34;date&#34;:&#34;04 /11 /2023&#34;,&#34;from&#34;:&#34;Aston Villa&#34;,&#34;time&#34;:&#34;22h55&#34;,&#34;to&#34;:&#34;Needham Market&#34;,&#34;player&#34;:&#34;Taylor Clark&#34;},{&#34;date&#34;:&#34;04 /11 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;19h37&#34;,&#34;to&#34;:&#34;Alvechurch&#34;,&#34;player&#34;:&#34;Harry Williams&#34;},{&#34;date&#34;:&#34;04 /11 /2023&#34;,&#34;from&#34;:&#34;West Bromwich&#34;,&#34;time&#34;:&#34;19h37&#34;,&#34;to&#34;:&#34;Alvechurch&#34;,&#34;player&#34;:&#34;Aurio Teixeira&#34;},{&#34;date&#34;:&#34;03 /11 /2023&#34;,&#34;from&#34;:&#34;Manchester United&#34;,&#34;time&#34;:&#34;09h59&#34;,&#34;to&#34;:&#34;Sunderland&#34;,&#34;player&#34;:&#34;Amad Diallo&#34;},{&#34;date&#34;:&#34;03 /11 /2023&#34;,&#34;from&#34;:&#34;Rosario Central&#34;,&#34;time&#34;:&#34;08h25&#34;,&#34;to&#34;:&#34;Brighton &amp; Hove Albion&#34;,&#34;player&#34;:&#34;Facundo Buonanotte&#34;},{&#34;date&#34;:&#34;02 /11 /2023&#34;,&#34;from&#34;:&#34;Brighton &amp; Hove Albion&#34;,&#34;time&#34;:&#34;17h58&#34;,&#34;to&#34;:&#34;Chelsea&#34;,&#34;player&#34;:&#34;Shim Mheuka&#34;},{&#34;date&#34;:&#34;02 /11 /2023&#34;,&#34;from&#34;:&#34;Arsenal&#34;,&#34;time&#34;:&#34;17h34&#34;,&#34;to&#34;:&#34;Southampton&#34;,&#34;player&#34;:&#34;Maitland-Niles&#34;},{&#34;date&#34;:&#34;02 /11 /2023&#34;,&#34;from&#34;:&#34;Arsenal&#34;,&#34;time&#34;:&#34;17h34&#34;,&#34;to&#34;:&#34;Southampton&#34;,&#34;player&#34;:&#34;Maitland-Niles&#34;},{&#34;date&#34;:&#34;02 /11 /2023&#34;,&#34;from&#34;:&#34;Nea Salamis&#34;,&#34;time&#34;:&#34;17h14&#34;,&#34;to&#34;:&#34;Welling United&#34;,&#34;player&#34;:&#34;Jay Simpson&#34;},{&#34;date&#34;:&#34;02 /11 /2023&#34;,&#34;from&#34;:&#34;West Bromwich&#34;,&#34;time&#34;:&#34;02h07&#34;,&#34;to&#34;:&#34;Yeovil Town&#34;,&#34;player&#34;:&#34;Jamie Andrews&#34;},{&#34;date&#34;:&#34;01 /11 /2023&#34;,&#34;from&#34;:&#34;West Bromwich&#34;,&#34;time&#34;:&#34;16h04&#34;,&#34;to&#34;:&#34;Telford United&#34;,&#34;player&#34;:&#34;Mo Faal&#34;},{&#34;date&#34;:&#34;31 /10 /2023&#34;,&#34;from&#34;:&#34;Stuttgart&#34;,&#34;time&#34;:&#34;11h40&#34;,&#34;to&#34;:&#34;Blackburn Rovers&#34;,&#34;player&#34;:&#34;Clinton Mola&#34;},{&#34;date&#34;:&#34;31 /10 /2023&#34;,&#34;from&#34;:&#34;Brighton &amp; Hove Albion&#34;,&#34;time&#34;:&#34;04h20&#34;,&#34;to&#34;:&#34;Hartley Wintney&#34;,&#34;player&#34;:&#34;Adam Desbois&#34;},{&#34;date&#34;:&#34;23 /10 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;17h19&#34;,&#34;to&#34;:&#34;Kidderminster&#34;,&#34;player&#34;:&#34;Joseph Starbuck&#34;},{&#34;date&#34;:&#34;18 /10 /2023&#34;,&#34;from&#34;:&#34;West Ham&#34;,&#34;time&#34;:&#34;18h23&#34;,&#34;to&#34;:&#34;MK Dons&#34;,&#34;player&#34;:&#34;David Martin&#34;},{&#34;date&#34;:&#34;18 /10 /2023&#34;,&#34;from&#34;:&#34;West Ham&#34;,&#34;time&#34;:&#34;18h06&#34;,&#34;to&#34;:&#34;Colchester&#34;,&#34;player&#34;:&#34;Max Jollife&#34;},{&#34;date&#34;:&#34;18 /10 /2023&#34;,&#34;from&#34;:&#34;Hayes &amp; Yeading&#34;,&#34;time&#34;:&#34;13h39&#34;,&#34;to&#34;:&#34;Politehnica Iasi&#34;,&#34;player&#34;:&#34;Shayon Harrison&#34;},{&#34;date&#34;:&#34;18 /10 /2023&#34;,&#34;from&#34;:&#34;Newcastle&#34;,&#34;time&#34;:&#34;00h36&#34;,&#34;to&#34;:&#34;Ashington AFC&#34;,&#34;player&#34;:&#34;Liam Smith&#34;},{&#34;date&#34;:&#34;17 /10 /2023&#34;,&#34;from&#34;:&#34;Southampton&#34;,&#34;time&#34;:&#34;03h34&#34;,&#34;to&#34;:&#34;Gosport Borough&#34;,&#34;player&#34;:&#34;Tommy-Lee Higgs&#34;},{&#34;date&#34;:&#34;16 /10 /2023&#34;,&#34;from&#34;:&#34;Watford&#34;,&#34;time&#34;:&#34;20h00&#34;,&#34;to&#34;:&#34;Oostende&#34;,&#34;player&#34;:&#34;Dapo Mebude&#34;},{&#34;date&#34;:&#34;16 /10 /2023&#34;,&#34;from&#34;:&#34;Newcastle&#34;,&#34;time&#34;:&#34;15h03&#34;,&#34;to&#34;:&#34;Reading&#34;,&#34;player&#34;:&#34;Lui Bradbury&#34;},{&#34;date&#34;:&#34;15 /10 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;12h53&#34;,&#34;to&#34;:&#34;Blackburn Rovers&#34;,&#34;player&#34;:&#34;George Hirst&#34;},{&#34;date&#34;:&#34;14 /10 /2023&#34;,&#34;from&#34;:&#34;Liverpool&#34;,&#34;time&#34;:&#34;09h26&#34;,&#34;to&#34;:&#34;QPR&#34;,&#34;player&#34;:&#34;Elijah Dixon-Bonner&#34;},{&#34;date&#34;:&#34;12 /10 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;01h45&#34;,&#34;to&#34;:&#34;Lancaster City&#34;,&#34;player&#34;:&#34;Sam Waller&#34;},{&#34;date&#34;:&#34;10 /10 /2023&#34;,&#34;from&#34;:&#34;Manchester United&#34;,&#34;time&#34;:&#34;18h40&#34;,&#34;to&#34;:&#34;Sunderland&#34;,&#34;player&#34;:&#34;Amad Diallo&#34;},{&#34;date&#34;:&#34;10 /10 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;17h28&#34;,&#34;to&#34;:&#34;Bradford Park Avenue&#34;,&#34;player&#34;:&#34;Thomas Angell&#34;},{&#34;date&#34;:&#34;10 /10 /2023&#34;,&#34;from&#34;:&#34;Dnipro-1&#34;,&#34;time&#34;:&#34;02h19&#34;,&#34;to&#34;:&#34;Brentford&#34;,&#34;player&#34;:&#34;Yehor Yarmoliuk&#34;},{&#34;date&#34;:&#34;09 /10 /2023&#34;,&#34;from&#34;:&#34;Chelsea&#34;,&#34;time&#34;:&#34;15h26&#34;,&#34;to&#34;:&#34;Stoke City&#34;,&#34;player&#34;:&#34;Josh Tobin&#34;},{&#34;date&#34;:&#34;09 /10 /2023&#34;,&#34;from&#34;:&#34;Reading&#34;,&#34;time&#34;:&#34;10h51&#34;,&#34;to&#34;:&#34;RB Leipzig&#34;,&#34;player&#34;:&#34;Orjan Nyland&#34;},{&#34;date&#34;:&#34;07 /10 /2023&#34;,&#34;from&#34;:&#34;West Bromwich&#34;,&#34;time&#34;:&#34;18h26&#34;,&#34;to&#34;:&#34;Derby County&#34;,&#34;player&#34;:&#34;Narel Phillips&#34;},{&#34;date&#34;:&#34;05 /10 /2023&#34;,&#34;from&#34;:&#34;Aston Villa&#34;,&#34;time&#34;:&#34;00h59&#34;,&#34;to&#34;:&#34;Chesterfield&#34;,&#34;player&#34;:&#34;Jack Clarke&#34;},{&#34;date&#34;:&#34;05 /10 /2023&#34;,&#34;from&#34;:&#34;Brighton &amp; Hove Albion&#34;,&#34;time&#34;:&#34;00h45&#34;,&#34;to&#34;:&#34;Southend United&#34;,&#34;player&#34;:&#34;Kacper Lopata&#34;},{&#34;date&#34;:&#34;03 /10 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;17h56&#34;,&#34;to&#34;:&#34;Manchester United&#34;,&#34;player&#34;:&#34;Safia Middleton-Patel&#34;},{&#34;date&#34;:&#34;02 /10 /2023&#34;,&#34;from&#34;:&#34;Reading&#34;,&#34;time&#34;:&#34;17h50&#34;,&#34;to&#34;:&#34;Puskás Akadémia FC&#34;,&#34;player&#34;:&#34;Brandon Ormonde-Ottewill&#34;},{&#34;date&#34;:&#34;01 /10 /2023&#34;,&#34;from&#34;:&#34;Wolverhampton&#34;,&#34;time&#34;:&#34;14h57&#34;,&#34;to&#34;:&#34;Grimsby Town&#34;,&#34;player&#34;:&#34;James Pardington&#34;},{&#34;date&#34;:&#34;01 /10 /2023&#34;,&#34;from&#34;:&#34;Stuttgart&#34;,&#34;time&#34;:&#34;12h03&#34;,&#34;to&#34;:&#34;Blackburn Rovers&#34;,&#34;player&#34;:&#34;Clinton Mola&#34;},{&#34;date&#34;:&#34;01 /10 /2023&#34;,&#34;from&#34;:&#34;QPR&#34;,&#34;time&#34;:&#34;09h18&#34;,&#34;to&#34;:&#34;Aalborg BK&#34;,&#34;player&#34;:&#34;Marco Ramkilde&#34;},{&#34;date&#34;:&#34;30 /09 /2023&#34;,&#34;from&#34;:&#34;Central Coast&#34;,&#34;time&#34;:&#34;09h46&#34;,&#34;to&#34;:&#34;Newcastle&#34;,&#34;player&#34;:&#34;Garang Kuol&#34;},{&#34;date&#34;:&#34;28 /09 /2023&#34;,&#34;from&#34;:&#34;Grasshoppers&#34;,&#34;time&#34;:&#34;23h37&#34;,&#34;to&#34;:&#34;Wolverhampton&#34;,&#34;player&#34;:&#34;Léo Bonatini&#34;},{&#34;date&#34;:&#34;28 /09 /2023&#34;,&#34;from&#34;:&#34;West Ham&#34;,&#34;time&#34;:&#34;11h10&#34;,&#34;to&#34;:&#34;OFI&#34;,&#34;player&#34;:&#34;Mésaque Djú&#34;},{&#34;date&#34;:&#34;27 /09 /2023&#34;,&#34;from&#34;:&#34;Crystal Palace&#34;,&#34;time&#34;:&#34;17h36&#34;,&#34;to&#34;:&#34;Bowers &amp; Pitsea&#34;,&#34;player&#34;:&#34;Dylan Thistleton&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;17h13&#34;,&#34;to&#34;:&#34;Bamber Bridge&#34;,&#34;player&#34;:&#34;Kade Ratchford&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;16h56&#34;,&#34;to&#34;:&#34;United of Manchester&#34;,&#34;player&#34;:&#34;Finlay Armstrong&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Southampton&#34;,&#34;time&#34;:&#34;13h46&#34;,&#34;to&#34;:&#34;AFC Bournemouth&#34;,&#34;player&#34;:&#34;Jack Stephens&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;13h43&#34;,&#34;to&#34;:&#34;Peterborough United&#34;,&#34;player&#34;:&#34;Johnson Gyamfi&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Fulham&#34;,&#34;time&#34;:&#34;13h23&#34;,&#34;to&#34;:&#34;Oxford City&#34;,&#34;player&#34;:&#34;Oliver Sanderson&#34;},{&#34;date&#34;:&#34;25 /09 /2023&#34;,&#34;from&#34;:&#34;Everton&#34;,&#34;time&#34;:&#34;22h20&#34;,&#34;to&#34;:&#34;Al Wahda&#34;,&#34;player&#34;:&#34;Allan&#34;},{&#34;date&#34;:&#34;25 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;17h26&#34;,&#34;to&#34;:&#34;Flint Town United&#34;,&#34;player&#34;:&#34;Harry Allen&#34;},{&#34;date&#34;:&#34;25 /09 /2023&#34;,&#34;from&#34;:&#34;Waterford&#34;,&#34;time&#34;:&#34;17h07&#34;,&#34;to&#34;:&#34;Cheshunt&#34;,&#34;player&#34;:&#34;Anthony Wordsworth&#34;},{&#34;date&#34;:&#34;24 /09 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;21h57&#34;,&#34;to&#34;:&#34;Boreham Wood&#34;,&#34;player&#34;:&#34;George Broadbent&#34;},{&#34;date&#34;:&#34;23 /09 /2023&#34;,&#34;from&#34;:&#34;Paris SG&#34;,&#34;time&#34;:&#34;18h48&#34;,&#34;to&#34;:&#34;Sunderland&#34;,&#34;player&#34;:&#34;Édouard Michut&#34;},{&#34;date&#34;:&#34;23 /09 /2023&#34;,&#34;from&#34;:&#34;HK Kópavogs&#34;,&#34;time&#34;:&#34;11h24&#34;,&#34;to&#34;:&#34;Herne Bay&#34;,&#34;player&#34;:&#34;Hassan Jalloh&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;West Bromwich&#34;,&#34;time&#34;:&#34;18h02&#34;,&#34;to&#34;:&#34;Kingstonian&#34;,&#34;player&#34;:&#34;Mac Chisholm&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;APOEL&#34;,&#34;time&#34;:&#34;17h54&#34;,&#34;to&#34;:&#34;Enfield Town&#34;,&#34;player&#34;:&#34;Marcus Wyllie&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;Leeds United&#34;,&#34;time&#34;:&#34;16h58&#34;,&#34;to&#34;:&#34;Whitby Town&#34;,&#34;player&#34;:&#34;George Scaife&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;13h32&#34;,&#34;to&#34;:&#34;Belper Town&#34;,&#34;player&#34;:&#34;Bailey Aisthorpe&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;Keflavík&#34;,&#34;time&#34;:&#34;13h17&#34;,&#34;to&#34;:&#34;Bamber Bridge&#34;,&#34;player&#34;:&#34;Marley Blair&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Newcastle&#34;,&#34;time&#34;:&#34;18h22&#34;,&#34;to&#34;:&#34;Hamilton&#34;,&#34;player&#34;:&#34;Reagan Thomson&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Everton&#34;,&#34;time&#34;:&#34;17h24&#34;,&#34;to&#34;:&#34;Lancaster City&#34;,&#34;player&#34;:&#34;Jamie Mellen&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;16h23&#34;,&#34;to&#34;:&#34;Lancaster City&#34;,&#34;player&#34;:&#34;Calen Gallagher-Allison&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;City of Liverpool&#34;,&#34;time&#34;:&#34;15h35&#34;,&#34;to&#34;:&#34;Stalybridge Celtic&#34;,&#34;player&#34;:&#34;Tinashe Chakwana&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Brighton &amp; Hove Albion&#34;,&#34;time&#34;:&#34;14h45&#34;,&#34;to&#34;:&#34;PSV&#34;,&#34;player&#34;:&#34;Inessa Kaagman&#34;}] .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/02/api.html",
            "relUrl": "/2022/10/02/api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "I am doing FRQ 2020 2",
            "content": "Code Explanation Part A and B . Part A . -The variable counter is created in order to be a placeholder for the leap years . -The for loop iterates through every year from year 1 to 2 and the isLeap method is called with the year -The if statement is a conditional to determine if the year is a leap year -If it is a leap year the counter will increment and is returned on the last line . Part B . -The firstday is able to give in integer whc specifies the date -The dayYear gives the date the day is on -firstDay is used to store the year and day of the year . Modulus 7 ensures that the values are within the days of the week index (7 days in a week) | . public static int numberOfLeaps(int year1, int year2) { int counter = 0; for(int i = year1; i&lt;= year2; i++) { if(isLeap(i)){ counter++; } } return counter; } public static int dayWeek(int month, int day, int year) { int day = firstDayofYear(year); day += (dayYear(month, day, year)-1); return day % 7 } . | public static int numberOfLeaps(int year1, int) { &lt;identifier&gt; expected .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/09/19/frq.html",
            "relUrl": "/2022/09/19/frq.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "2D Array",
            "content": "Making storytelling for hairstages after haircuts . import java.util.Scanner; class HairStages { String [][] haircuts; String [] barber; //have to make a constructor to initialize the array using public public HairStages() { haircuts = new String[][]{ //hairstage 1 long hair { &quot;..-.._&quot;, &quot;.-&#39; `-.&quot;, &quot;| _...._ |&quot; , &quot;| | __ __ | |&quot;, &quot;| | |o_Y_o| | |&quot;, &quot;| | (___) | |&quot;, &quot; | .#####. |/&quot;, &quot; | # ___ # |&quot;, &quot; &#39;.# #.&#39;&quot;, &quot;J&#39;#####&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot; .s$$- &quot; &quot; &quot;-$$s.&quot;, &quot; $$&#39; __ __ &#39;$$&quot;, &quot; $$ Lo_Y_oJ $$&quot;, &quot; ($ (___) $)&quot;, &quot; | |&quot;, &quot; | ___ |&quot;, &quot; &#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot; _.-&#39; `-._&quot; }, { &quot; !!!!!&quot;, &quot; .!!!!!.&quot;, &quot;&#39; __ __ &#39;&quot;, &quot; | Lo_Y_oJ |&quot;, &quot; (, (___) ,)&quot;, &quot;| |&quot;, &quot;| ___ |&quot;, &quot; /&quot;, &quot;_J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot; ,c???????c,&quot;, &quot; ?? __ __ ??&quot;, &quot; | (o_|_o) |&quot;, &quot; (, (___) ,)&quot;, &quot; | |&quot;, &quot; | |&quot;, &quot; &#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot;.- &quot; &quot; &quot;-.&quot;, &quot;&#39; __ __ &#39;&quot;, &quot; | (o_|_o) |&quot;, &quot;(, (___) ,)&quot;, &quot;| |&quot;, &quot;| .___. |&quot;, &quot;&#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; } }; barber = new String [] { &quot; ,/&#39;&quot;, &quot; (_). ,/&#39;&quot;, &quot; _ ::&quot;, &quot; (_)&#39; ` .&quot;, &quot; ` .&quot;, }; } public void printHaircuts(int numberOfHairCuts) { for(int i=0; i &lt; numberOfHairCuts; i++) { for(int j=0; j &lt; haircuts[i].length; j++){ System.out.println(haircuts[i][j]); } } } public void printBarber() { for(int i=0; i&lt;barber.length; i++){ System.out.println(barber[i]); } } } . HairStages newObject = new HairStages(); newObject.printHaircuts(1); Scanner myObj = new Scanner(System.in); newObject.printBarber(); . ..-.._ .-&#39; `-. | _...._ | | | __ __ | | | | |o_Y_o| | | | | (___) | | | .#####. |/ | # ___ # | &#39;.# #.&#39; J&#39;#####&#39;L_ _.-&#39; `-._ ,/&#39; (_). ,/&#39; _ :: (_)&#39; ` . ` . .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/09/13/codeforarray.html",
            "relUrl": "/2022/09/13/codeforarray.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "An Example Markdown Post",
            "content": "If statements / Gratitude . if statements . Deployed Website . Link to deployed website .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/markdown/2022/09/11/Week3.html",
            "relUrl": "/markdown/2022/09/11/Week3.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "If Else Assignment",
            "content": "The code on the bottom displays a boolean conditional which is true . I begin by importing the scanner in order to allow myself to use the user input. After I am able to use the scanner properties I create a variable called number score which is set equal to the user&#39;s scpre that they input. Following this, I create an if else statement with a conditional that states if the users inputted score is greater than or equal to 90, they have receieved an A under Mr. Mortensen&#39;s grading. The else if is an alternate for if this condition is not met and makes the conditional if the users input is greater than equal to 80 but less than 90 then they have received a B. Likewise using the same logic I am able to the same for the rest of my conditions continuing down to if all the if and else if conditionals are not met then the else means that they receievd an F. . System.out.print(&quot;hello&quot;); . hello . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input int numberScore = scanner.nextInt(); System.out.println(numberScore); if (numberScore &gt;= 90) { System.out.print(&quot;You went above and beyond Hey Hey Hey you got an A :) &quot;); } else if (numberScore &gt;= 80 &amp;&amp; numberScore&lt; 90) { System.out.print(&quot;You did what you were supposed to so B&quot;); } else if (numberScore &gt;= 70 &amp;&amp; numberScore &lt; 80) { System.out.print(&quot;Stop messing around this is lower than average C&quot;); } else if (numberScore &gt;= 60 &amp;&amp; numberScore &lt; 70) { System.out.print(&quot;You literally wrote a line of code D&quot;); } else { System.out.print(&quot;You literally did nothing thats the only way possible F&quot;); } . 2 You literally did nothing thats the only way possible F . In this code segment, I once again imported the scanner, however this time I added a print statement as a way to give clear directions for the user input. I then set the keyword for 4 being the correct answer which will print congrats if it is correct. The switch case just makes it so that it identifies the variable of input so I don&#39;t have to repeat it over and over again. The case is essntially the contitional and the print is the result of whether the user input matches up with the statement. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input System.out.print(&quot;Pick a number 1-5 if you guess it right then you will be congratualeted &quot;); int numberScore = scanner.nextInt(); System.out.println(numberScore); switch(numberScore) { case 1: System.out.print(&quot;Wrong Number&quot;); break; case 2: System.out.print(&quot;Wrong Number&quot;); break; case 3: System.out.print(&quot;Wrong Number&quot;); break; case 4: System.out.print(&quot;Congrats!&quot;); break; case 5: System.out.print(&quot;Wrong Number&quot;); break; } . Jupyter cannot be started. Error attempting to locate Jupyter: Select an Interpreter to start Jupyter Run the following command to install &#39;jupyter and notebook&#39; into the Python environment. Command: &#39;python -m pip install jupyter notebook -U or conda install jupyter notebook -U&#39; Click &lt;a href=&#39;https://aka.ms/installJupyterForVSCode&#39;&gt;here&lt;/a&gt; for more info. . Demorgans Law is essntially a form of code where you can use the ! or the not operator in a conditional. If there is a not outside the boolean expression it distributes and makes all the signs and values the opposite of what it normally is. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input System.out.print(&quot;Pick a number greater than or equal to 90 to see the law in action&quot;); int numberScore = scanner.nextInt(); System.out.println(numberScore); if (!(numberScore &gt;= 90)) { System.out.print(&quot;You went above and beyond Hey Hey Hey you got an A :) &quot;); } else { System.out.print(&quot;See I told you&quot;); } . Pick a number greater than or equal to 90 to see the law in action103 See I told you . As you can see by adding the ! it created the inverse of the conditional meaning that the boolean changed from &gt;= 90 to &lt;= 90. As a result of this when we were asked to put a number 90 or greater the conditional was false and skipped to the else statement. . Grateful and Gratitude . How i see it is that most of us in the class have the pleasure of being able to eat three meals a day. The little things we do complain about are so minuscule that in the larger scale of things they mean literally nothing. If something goes bad for you, you need to really think is it really worth getting this sad over. And even if it is put your head up and and get up. Resilience and Relentlessness are the two factors which differentiate success from people who are not. i am grateful that I am even in a school which offers APCSA. The classroom and resources provided to us are more than enough to help us ready for college level classes and real world jobs. Additionally, I am thankful for my accomplishments in soccer, such as making the top levels of ECNL, USSDA, and Varsity. Additionally we have won CIF divison 1 soccer, which was purely the product of our relentless team spirit and refusal to give up even when all odds were against us. But the greatest thing about winning against all odds is the satisfaction. No one likes an easy win, we are supposed to struggle. Believe me the end reward is amazing, which is why no matter what the goal is, you need to persevere and put your all into it. . Video Note . -Your expectations will always be met with reality . -Even if these expectations are not met do not get discouraged and see it as an opportunity to learn . — Keep your mind in the present, as going to far into the past or future will only discourage or stress you out . Happiness is a mindset therefore you technically have full control of when you are happy or not Have a positive outlook on things and you will be happy even in a bad circumstances . Goals for this year . I am going to have mastery in Java and python before I go to college I will establish a routine of hard work and discipline and will be fully consistent with it by November I will win another CIF championship I will get out of my comfort zone and talk to people I never have before I will try to be as optimistic as I can no matter if I am having a bad day or not .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/jupyter/2022/09/10/ifelse.html",
            "relUrl": "/jupyter/2022/09/10/ifelse.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post27": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jaymanjrekar.github.io/jaysfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jaymanjrekar.github.io/jaysfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}