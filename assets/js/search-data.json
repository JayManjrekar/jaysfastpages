{
  
    
        "post0": {
            "title": "Title",
            "content": "import java.util.List; import java.util.ArrayList; List&lt;Integer&gt; myArrayList = new ArrayList(); int[] myArray = new int[3]; myArray[0] = 5; myArray[1] = 7; myArray[2] = 8; myArray[2] = 9; myArrayList.add(5); myArrayList.add(7); myArrayList.add(9); int aCount = myArray.length; int aListCount = myArrayList.size(); int secondNum = myArray[1]; int secondNumList = myArrayList.get(1); myArrayList.set(2, 9); System.out.println(myArray[1]); . 7 . import java.util.ArrayList; import java.util.Scanner; Scanner scan = new Scanner(System.in); System.out.println(&quot;What data do you want to remove? (Min, Mode, Median, Mean)&quot;); String dataInput = scan.nextLine(); System.out.println(dataInput); ArrayList&lt;String&gt; stats = new ArrayList&lt;String&gt;(); stats.add(&quot;Min&quot;); stats.add(&quot;Mode&quot;); stats.add(&quot;Median&quot;); stats.add(&quot;Mean&quot;); System.out.println(stats); if(dataInput.equals(&quot;Min&quot;)){ stats.remove(&quot;Min&quot;); }else if(dataInput.equals(&quot;Mode&quot;)){ stats.remove(&quot;Mode&quot;); } else if(dataInput.equals(&quot;Median&quot;)){ stats.remove(&quot;Median&quot;); }else if(dataInput.equals(&quot;Mean&quot;)){ stats.remove(&quot;Mean&quot;); } for (int i = 0; i &lt; stats.size(); i++) { System.out.println(stats.get(i)); } . What data do you want to remove? (Min, Mode, Median, Mean) Median [Min, Mode, Median, Mean] Min Mode Mean .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/16/arraylist.html",
            "relUrl": "/2022/10/16/arraylist.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fibonacci",
            "content": "abstract class Parentfib { public void print(int count){ int[] fibNumbers = getfib(count); for(int i =0; i&lt;fibNumbers.length; i++){ System.out.println(fibNumbers[i]); } } abstract int[] getfib(int count); } . Recursion Loop . class Recurfib extends Parentfib{ public int[] getfib(int count){ } public static void main(String args[]){ int count=20; System.out.print(n1+&quot; &quot;+n2);//printing 0 and 1 printFibonacci(count-2);//n-2 because 2 numbers are already printed } } . For Loop . class forFib extends Parentfib{ int[] getfib(int count) { int[] fibonacciNumbers = new int[count+1]; int firstTerm = 0, secondTerm = 1; for (int i = 1; i &lt;= count; ++i) { // compute the next term int nextTerm = firstTerm + secondTerm; firstTerm = secondTerm; secondTerm = nextTerm; fibonacciNumbers[i] = firstTerm; } return fibonacciNumbers; } public static void main(){ forFib fibo = new forFib(); fibo.print(10); } } forFib.main(); . 0 1 1 2 3 5 8 13 21 34 55 . While Loop . class Whileloo { // Function to print N Fibonacci Number static void Fibonacci(int N) { int num1 = 0, num2 = 1; int counter = 0; // Iterate till counter is N while (counter &lt; N) { // Print the number System.out.print(num1 + &quot; &quot;); // Swap int num3 = num2 + num1; num1 = num2; num2 = num3; counter = counter + 1; } } // Driver Code public static void main(String args[]) { // Given Number N int N = 18; // Function Call Fibonacci(N); } } . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ public class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected void init() { this.name = &quot;Stream&quot;; Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) .limit(this.size) .forEach(f -&gt; this.setData(f[0]) ); } /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ static public void main(String[] args) { Fibo fib = new Fibo(); fib.print(); } } Fibo.main(null); . Init method = Stream fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/16/09-26-fibonacci.html",
            "relUrl": "/2022/10/16/09-26-fibonacci.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Object Menu",
            "content": "What is a Class . A class is like an object constructor | Acts like a blue print | Has certain attributes and methods which can be called in other classes | . What is an Object . An object is part of a java class | It is typically described as an instance of a class | Inherits the attribute and methods that are within the class | . import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Instance Variables public final String DEFAULT = &quot; u001B[0m&quot;; // Default Terminal Color public final String[][] COLORS = { // 2D Array of ANSI Terminal Colors {&quot;Default&quot;,DEFAULT}, {&quot;Red&quot;, &quot; u001B[31m&quot;}, {&quot;Green&quot;, &quot; u001B[32m&quot;}, {&quot;Yellow&quot;, &quot; u001B[33m&quot;}, {&quot;Blue&quot;, &quot; u001B[34m&quot;}, {&quot;Purple&quot;, &quot; u001B[35m&quot;}, {&quot;Cyan&quot;, &quot; u001B[36m&quot;}, {&quot;White&quot;, &quot; u001B[37m&quot;}, }; // 2D column location for data public final int NAME = 0; public final int ANSI = 1; // ANSI is the &quot;standard&quot; for terminal codes // Constructor on this Object takes control of menu events and actions public Menu() { Scanner sc = new Scanner(System.in); // using Java Scanner Object this.print(); // print Menu boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Output colors&quot;); System.out.println(&quot;3 - Loading in color&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;4 - Array of Grades&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: for(int i = 0; i &lt; COLORS.length; i++) // loop through COLORS array System.out.print(COLORS[i][ANSI] + COLORS[i][NAME]); break; case 3: System.out.print(&quot;Loading...&quot;); for (int i = 0; i &lt; 20; i++) { // fixed length loading bar int random = (int) (Math.random() * COLORS.length); // random logic try { Thread.sleep(100); // delay for loading } catch (Exception e) { System.out.println(e); } System.out.print(COLORS[random][ANSI] + &quot;#&quot;); } break; case 4: int[] grades = {98,95,85,73}; for(int i = 0; i&lt;grades.length; i++){ System.out.println(grades[i]); } default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(DEFAULT); // make sure to reset color and provide new line return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); // starting Menu object } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Output colors 3 - Loading in color 0 - Quit 4 - Array of Grades - 4: 98 95 85 73 Unexpected choice, try again. .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/03/objectmenu.html",
            "relUrl": "/2022/10/03/objectmenu.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Images",
            "content": "import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private final String greyDir = &quot;images/tmp/greyscale/&quot;; private final String redDir = &quot;images/tmp/red/&quot;; private final String blueDir = &quot;images/tmp/blue/&quot;; private final String greenDir = &quot;images/tmp/green/&quot;; private String inFile; private String resizedFile; private String redFile; private String greenFile; private String blueFile; private String greyscaleFile; private String asciiFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.greyscaleFile = this.greyDir + name + &quot;_grey&quot; + &quot;.&quot; + ext; this.redFile = this.redDir + name + &quot;_red&quot; + &quot;.&quot; + ext; this.blueFile = this.blueDir + name + &quot;_blue&quot; + &quot;.&quot; + ext; this.greenFile = this.greenDir + name + &quot;_green&quot; + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } public void greyscale() { BufferedImage img = null; BufferedImage greyImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greyImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color (total, total, total); greyImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greyImg), this.ext, new File(greyscaleFile)); } catch (IOException e) { return; } this.inFile = this.greyscaleFile; // use scaled file vs original file in Class this.setStats(); } public void redscale() { BufferedImage img = null; BufferedImage redImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data redImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) co.getRed(); int green = 0; int blue = 0; Color newColor = new Color(red,green,blue); redImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(redImg), this.ext, new File(redFile)); } catch (IOException e) { return; } this.inFile = this.redFile; // use scaled file vs original file in Class this.setStats(); } public void greenscale() { BufferedImage img = null; BufferedImage greenImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data greenImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = 0; int green = (int) co.getGreen(); int blue = 0; Color newColor = new Color( red, green, blue); greenImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(greenImg), this.ext, new File(greenFile)); } catch (IOException e) { return; } this.inFile = this.greenFile; // use scaled file vs original file in Class this.setStats() } public void bluescale() { BufferedImage img = null; BufferedImage blueImg = null; try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data blueImg = img; // create a new BufferedImage for drawing for (int i = 0; i &lt; img.getHeight(); i++) { for (int j = 0; j &lt; img.getWidth(); j++) { Color co = new Color(img.getRGB(j, i)); int red = (int) (co.getRed() * 0.299); int green = (int) (co.getGreen() * 0.587); int blue = (int) (co.getBlue() * 0.114); int total = red + green + blue; Color newColor = new Color(0, 0, total); blueImg.setRGB(j, i, newColor.getRGB()); } } } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(blueImg), this.ext, new File(blueFile)); } catch (IOException e) { return; } this.inFile = this.blueFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i++) { if (i % 2 != 0) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;***&quot;; } else if (g &gt;= 170) { str = &quot;+++&quot;; } else if (g &gt;= 120) { str = &quot;^^^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&amp;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;888&quot;; } else if (g &gt;= 60) { str = &quot;###&quot;; } else { str = &quot;@@@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics sponge = new Pics(&quot;sponge&quot;, &quot;png&quot;); //sponge.greyscale(); // sponge.redscale(); sponge.greenscale(); sponge.bluescale(); // sponge.printStats(&quot;Original&quot;); // sponge.resize(33); // sponge.printStats(&quot;Scaled&quot;); sponge.convertToAscii(); } } Pics.main(null); .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/02/images.html",
            "relUrl": "/2022/10/02/images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Rapid API",
            "content": "%maven org.json:json:20220924 import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; import java.util.Scanner; public class Soccer { public static void main(String[] args) throws IOException, InterruptedException { HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://soccer-transfers.p.rapidapi.com/en&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;39c4bf8c2emsh30b02ab6dc01dd9p13f427jsn690a650cf2ec&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;soccer-transfers.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); } } . Soccer.main(null); . [{&#34;date&#34;:&#34;02 /10 /2023&#34;,&#34;from&#34;:&#34;Reading&#34;,&#34;time&#34;:&#34;17h50&#34;,&#34;to&#34;:&#34;Puskás Akadémia FC&#34;,&#34;player&#34;:&#34;Brandon Ormonde-Ottewill&#34;},{&#34;date&#34;:&#34;01 /10 /2023&#34;,&#34;from&#34;:&#34;Wolverhampton&#34;,&#34;time&#34;:&#34;14h57&#34;,&#34;to&#34;:&#34;Grimsby Town&#34;,&#34;player&#34;:&#34;James Pardington&#34;},{&#34;date&#34;:&#34;01 /10 /2023&#34;,&#34;from&#34;:&#34;Stuttgart&#34;,&#34;time&#34;:&#34;12h03&#34;,&#34;to&#34;:&#34;Blackburn Rovers&#34;,&#34;player&#34;:&#34;Clinton Mola&#34;},{&#34;date&#34;:&#34;01 /10 /2023&#34;,&#34;from&#34;:&#34;QPR&#34;,&#34;time&#34;:&#34;09h18&#34;,&#34;to&#34;:&#34;Aalborg BK&#34;,&#34;player&#34;:&#34;Marco Ramkilde&#34;},{&#34;date&#34;:&#34;30 /09 /2023&#34;,&#34;from&#34;:&#34;Central Coast&#34;,&#34;time&#34;:&#34;09h46&#34;,&#34;to&#34;:&#34;Newcastle&#34;,&#34;player&#34;:&#34;Garang Kuol&#34;},{&#34;date&#34;:&#34;28 /09 /2023&#34;,&#34;from&#34;:&#34;Grasshoppers&#34;,&#34;time&#34;:&#34;23h37&#34;,&#34;to&#34;:&#34;Wolverhampton&#34;,&#34;player&#34;:&#34;Léo Bonatini&#34;},{&#34;date&#34;:&#34;28 /09 /2023&#34;,&#34;from&#34;:&#34;West Ham&#34;,&#34;time&#34;:&#34;11h10&#34;,&#34;to&#34;:&#34;OFI&#34;,&#34;player&#34;:&#34;Mésaque Djú&#34;},{&#34;date&#34;:&#34;27 /09 /2023&#34;,&#34;from&#34;:&#34;Crystal Palace&#34;,&#34;time&#34;:&#34;17h36&#34;,&#34;to&#34;:&#34;Bowers &amp; Pitsea&#34;,&#34;player&#34;:&#34;Dylan Thistleton&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;17h13&#34;,&#34;to&#34;:&#34;Bamber Bridge&#34;,&#34;player&#34;:&#34;Kade Ratchford&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;16h56&#34;,&#34;to&#34;:&#34;United of Manchester&#34;,&#34;player&#34;:&#34;Finlay Armstrong&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Southampton&#34;,&#34;time&#34;:&#34;13h46&#34;,&#34;to&#34;:&#34;AFC Bournemouth&#34;,&#34;player&#34;:&#34;Jack Stephens&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;13h43&#34;,&#34;to&#34;:&#34;Peterborough United&#34;,&#34;player&#34;:&#34;Johnson Gyamfi&#34;},{&#34;date&#34;:&#34;26 /09 /2023&#34;,&#34;from&#34;:&#34;Fulham&#34;,&#34;time&#34;:&#34;13h23&#34;,&#34;to&#34;:&#34;Oxford City&#34;,&#34;player&#34;:&#34;Oliver Sanderson&#34;},{&#34;date&#34;:&#34;25 /09 /2023&#34;,&#34;from&#34;:&#34;Everton&#34;,&#34;time&#34;:&#34;22h20&#34;,&#34;to&#34;:&#34;Al Wahda&#34;,&#34;player&#34;:&#34;Allan&#34;},{&#34;date&#34;:&#34;25 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;17h26&#34;,&#34;to&#34;:&#34;Flint Town United&#34;,&#34;player&#34;:&#34;Harry Allen&#34;},{&#34;date&#34;:&#34;25 /09 /2023&#34;,&#34;from&#34;:&#34;Waterford&#34;,&#34;time&#34;:&#34;17h07&#34;,&#34;to&#34;:&#34;Cheshunt&#34;,&#34;player&#34;:&#34;Anthony Wordsworth&#34;},{&#34;date&#34;:&#34;24 /09 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;21h57&#34;,&#34;to&#34;:&#34;Boreham Wood&#34;,&#34;player&#34;:&#34;George Broadbent&#34;},{&#34;date&#34;:&#34;23 /09 /2023&#34;,&#34;from&#34;:&#34;Paris SG&#34;,&#34;time&#34;:&#34;18h48&#34;,&#34;to&#34;:&#34;Sunderland&#34;,&#34;player&#34;:&#34;Édouard Michut&#34;},{&#34;date&#34;:&#34;23 /09 /2023&#34;,&#34;from&#34;:&#34;HK Kópavogs&#34;,&#34;time&#34;:&#34;11h24&#34;,&#34;to&#34;:&#34;Herne Bay&#34;,&#34;player&#34;:&#34;Hassan Jalloh&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;West Bromwich&#34;,&#34;time&#34;:&#34;18h02&#34;,&#34;to&#34;:&#34;Kingstonian&#34;,&#34;player&#34;:&#34;Mac Chisholm&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;APOEL&#34;,&#34;time&#34;:&#34;17h54&#34;,&#34;to&#34;:&#34;Enfield Town&#34;,&#34;player&#34;:&#34;Marcus Wyllie&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;Leeds United&#34;,&#34;time&#34;:&#34;16h58&#34;,&#34;to&#34;:&#34;Whitby Town&#34;,&#34;player&#34;:&#34;George Scaife&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;13h32&#34;,&#34;to&#34;:&#34;Belper Town&#34;,&#34;player&#34;:&#34;Bailey Aisthorpe&#34;},{&#34;date&#34;:&#34;22 /09 /2023&#34;,&#34;from&#34;:&#34;Keflavík&#34;,&#34;time&#34;:&#34;13h17&#34;,&#34;to&#34;:&#34;Bamber Bridge&#34;,&#34;player&#34;:&#34;Marley Blair&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Newcastle&#34;,&#34;time&#34;:&#34;18h22&#34;,&#34;to&#34;:&#34;Hamilton&#34;,&#34;player&#34;:&#34;Reagan Thomson&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Everton&#34;,&#34;time&#34;:&#34;17h24&#34;,&#34;to&#34;:&#34;Lancaster City&#34;,&#34;player&#34;:&#34;Jamie Mellen&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;16h23&#34;,&#34;to&#34;:&#34;Lancaster City&#34;,&#34;player&#34;:&#34;Calen Gallagher-Allison&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Hornchurch&#34;,&#34;time&#34;:&#34;16h18&#34;,&#34;to&#34;:&#34;Hamilton&#34;,&#34;player&#34;:&#34;Ellis Brown&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Hamilton&#34;,&#34;time&#34;:&#34;16h18&#34;,&#34;to&#34;:&#34;Hornchurch&#34;,&#34;player&#34;:&#34;Ellis Brown&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;15h35&#34;,&#34;to&#34;:&#34;Stalybridge Celtic&#34;,&#34;player&#34;:&#34;Tinashe Chakwana&#34;},{&#34;date&#34;:&#34;21 /09 /2023&#34;,&#34;from&#34;:&#34;Brighton &amp; Hove Albion&#34;,&#34;time&#34;:&#34;14h45&#34;,&#34;to&#34;:&#34;PSV&#34;,&#34;player&#34;:&#34;Inessa Kaagman&#34;},{&#34;date&#34;:&#34;20 /09 /2023&#34;,&#34;from&#34;:&#34;Wolverhampton&#34;,&#34;time&#34;:&#34;21h08&#34;,&#34;to&#34;:&#34;Bolton Wanderers&#34;,&#34;player&#34;:&#34;Conor Carty&#34;},{&#34;date&#34;:&#34;20 /09 /2023&#34;,&#34;from&#34;:&#34;Manchester United&#34;,&#34;time&#34;:&#34;21h08&#34;,&#34;to&#34;:&#34;Bolton Wanderers&#34;,&#34;player&#34;:&#34;Connor Stanley&#34;},{&#34;date&#34;:&#34;20 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;18h46&#34;,&#34;to&#34;:&#34;Barnsley&#34;,&#34;player&#34;:&#34;Jack Butterfill&#34;},{&#34;date&#34;:&#34;20 /09 /2023&#34;,&#34;from&#34;:&#34;Fulham&#34;,&#34;time&#34;:&#34;18h46&#34;,&#34;to&#34;:&#34;Barnsley&#34;,&#34;player&#34;:&#34;Ziyad Larkèche&#34;},{&#34;date&#34;:&#34;20 /09 /2023&#34;,&#34;from&#34;:&#34;Chelsea&#34;,&#34;time&#34;:&#34;16h29&#34;,&#34;to&#34;:&#34;Southampton&#34;,&#34;player&#34;:&#34;Tyler Dibling&#34;},{&#34;date&#34;:&#34;20 /09 /2023&#34;,&#34;from&#34;:&#34;Dundalk&#34;,&#34;time&#34;:&#34;13h33&#34;,&#34;to&#34;:&#34;Brentford&#34;,&#34;player&#34;:&#34;Val Adedokun&#34;},{&#34;date&#34;:&#34;20 /09 /2023&#34;,&#34;from&#34;:&#34;Chelsea&#34;,&#34;time&#34;:&#34;13h24&#34;,&#34;to&#34;:&#34;Derby County&#34;,&#34;player&#34;:&#34;Joe Haigh&#34;},{&#34;date&#34;:&#34;20 /09 /2023&#34;,&#34;from&#34;:&#34;Brighton &amp; Hove Albion&#34;,&#34;time&#34;:&#34;13h24&#34;,&#34;to&#34;:&#34;Derby County&#34;,&#34;player&#34;:&#34;Leigh Kavanagh&#34;},{&#34;date&#34;:&#34;19 /09 /2023&#34;,&#34;from&#34;:&#34;Newcastle&#34;,&#34;time&#34;:&#34;11h43&#34;,&#34;to&#34;:&#34;TNS&#34;,&#34;player&#34;:&#34;Adam Wilson&#34;},{&#34;date&#34;:&#34;19 /09 /2023&#34;,&#34;from&#34;:&#34;Liverpool&#34;,&#34;time&#34;:&#34;11h42&#34;,&#34;to&#34;:&#34;Caernarfon Town&#34;,&#34;player&#34;:&#34;Fidel O´Rourke&#34;},{&#34;date&#34;:&#34;18 /09 /2023&#34;,&#34;from&#34;:&#34;Burton Albion&#34;,&#34;time&#34;:&#34;17h08&#34;,&#34;to&#34;:&#34;Motherwell&#34;,&#34;player&#34;:&#34;Louis Moult&#34;},{&#34;date&#34;:&#34;18 /09 /2023&#34;,&#34;from&#34;:&#34;Rangers&#34;,&#34;time&#34;:&#34;15h06&#34;,&#34;to&#34;:&#34;Leicester City&#34;,&#34;player&#34;:&#34;Demi Vance&#34;},{&#34;date&#34;:&#34;17 /09 /2023&#34;,&#34;from&#34;:&#34;Juventus&#34;,&#34;time&#34;:&#34;17h22&#34;,&#34;to&#34;:&#34;Liverpool&#34;,&#34;player&#34;:&#34;Arthur&#34;},{&#34;date&#34;:&#34;17 /09 /2023&#34;,&#34;from&#34;:&#34;Manchester City&#34;,&#34;time&#34;:&#34;16h25&#34;,&#34;to&#34;:&#34;Everton&#34;,&#34;player&#34;:&#34;Jessica Park&#34;},{&#34;date&#34;:&#34;17 /09 /2023&#34;,&#34;from&#34;:&#34;Celtic&#34;,&#34;time&#34;:&#34;12h06&#34;,&#34;to&#34;:&#34;Leeds United&#34;,&#34;player&#34;:&#34;Rory Mahady&#34;},{&#34;date&#34;:&#34;16 /09 /2023&#34;,&#34;from&#34;:&#34;Stoke City&#34;,&#34;time&#34;:&#34;09h56&#34;,&#34;to&#34;:&#34;Aris&#34;,&#34;player&#34;:&#34;Peter Etebo&#34;},{&#34;date&#34;:&#34;16 /09 /2023&#34;,&#34;from&#34;:&#34;Blackburn Rovers&#34;,&#34;time&#34;:&#34;02h50&#34;,&#34;to&#34;:&#34;Dundee United&#34;,&#34;player&#34;:&#34;Lauren Perry&#34;},{&#34;date&#34;:&#34;15 /09 /2023&#34;,&#34;from&#34;:&#34;West Bromwich&#34;,&#34;time&#34;:&#34;16h32&#34;,&#34;to&#34;:&#34;Reading&#34;,&#34;player&#34;:&#34;Andy Carroll&#34;},{&#34;date&#34;:&#34;15 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;15h14&#34;,&#34;to&#34;:&#34;Notts County&#34;,&#34;player&#34;:&#34;Brad Young&#34;},{&#34;date&#34;:&#34;14 /09 /2023&#34;,&#34;from&#34;:&#34;Wolverhampton&#34;,&#34;time&#34;:&#34;19h49&#34;,&#34;to&#34;:&#34;PSV&#34;,&#34;player&#34;:&#34;Ki-Jana Hoever&#34;},{&#34;date&#34;:&#34;14 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;12h46&#34;,&#34;to&#34;:&#34;United of Manchester&#34;,&#34;player&#34;:&#34;Will Russ&#34;},{&#34;date&#34;:&#34;14 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;02h08&#34;,&#34;to&#34;:&#34;Oldham Athletic&#34;,&#34;player&#34;:&#34;Joe McGlynn&#34;},{&#34;date&#34;:&#34;13 /09 /2023&#34;,&#34;from&#34;:&#34;Metz&#34;,&#34;time&#34;:&#34;17h23&#34;,&#34;to&#34;:&#34;Reading&#34;,&#34;player&#34;:&#34;Amadou Mbengue&#34;},{&#34;date&#34;:&#34;13 /09 /2023&#34;,&#34;from&#34;:&#34;Burnley&#34;,&#34;time&#34;:&#34;15h09&#34;,&#34;to&#34;:&#34;West Bromwich&#34;,&#34;player&#34;:&#34;Erik Pieters&#34;},{&#34;date&#34;:&#34;13 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;11h19&#34;,&#34;to&#34;:&#34;Everton&#34;,&#34;player&#34;:&#34;Eldin Jakupovic&#34;},{&#34;date&#34;:&#34;13 /09 /2023&#34;,&#34;from&#34;:&#34;Crystal Palace&#34;,&#34;time&#34;:&#34;02h14&#34;,&#34;to&#34;:&#34;STK Samorin&#34;,&#34;player&#34;:&#34;Kelvin Agho&#34;},{&#34;date&#34;:&#34;13 /09 /2023&#34;,&#34;from&#34;:&#34;Celtic&#34;,&#34;time&#34;:&#34;02h01&#34;,&#34;to&#34;:&#34;West Bromwich&#34;,&#34;player&#34;:&#34;Tom Rogic&#34;},{&#34;date&#34;:&#34;12 /09 /2023&#34;,&#34;from&#34;:&#34;QPR&#34;,&#34;time&#34;:&#34;19h49&#34;,&#34;to&#34;:&#34;Bordeaux&#34;,&#34;player&#34;:&#34;Yoann Barbet&#34;},{&#34;date&#34;:&#34;12 /09 /2023&#34;,&#34;from&#34;:&#34;Wolverhampton&#34;,&#34;time&#34;:&#34;19h13&#34;,&#34;to&#34;:&#34;Bradford City&#34;,&#34;player&#34;:&#34;Joe O´Shaughnessy&#34;},{&#34;date&#34;:&#34;12 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;18h20&#34;,&#34;to&#34;:&#34;Northampton Town&#34;,&#34;player&#34;:&#34;Josh Eppiah&#34;},{&#34;date&#34;:&#34;12 /09 /2023&#34;,&#34;from&#34;:&#34;West Bromwich&#34;,&#34;time&#34;:&#34;16h38&#34;,&#34;to&#34;:&#34;Notts County&#34;,&#34;player&#34;:&#34;Quévin Castro&#34;},{&#34;date&#34;:&#34;11 /09 /2023&#34;,&#34;from&#34;:&#34;Manchester City&#34;,&#34;time&#34;:&#34;21h43&#34;,&#34;to&#34;:&#34;Lommel SK&#34;,&#34;player&#34;:&#34;Yeboah Amankwah&#34;},{&#34;date&#34;:&#34;11 /09 /2023&#34;,&#34;from&#34;:&#34;Fulham&#34;,&#34;time&#34;:&#34;14h24&#34;,&#34;to&#34;:&#34;Charlton Athletic&#34;,&#34;player&#34;:&#34;Nas Bakrin&#34;},{&#34;date&#34;:&#34;10 /09 /2023&#34;,&#34;from&#34;:&#34;Fulham&#34;,&#34;time&#34;:&#34;21h45&#34;,&#34;to&#34;:&#34;Volos NFC&#34;,&#34;player&#34;:&#34;Anthony Knockaert&#34;},{&#34;date&#34;:&#34;10 /09 /2023&#34;,&#34;from&#34;:&#34;Manchester United&#34;,&#34;time&#34;:&#34;17h46&#34;,&#34;to&#34;:&#34;Sparta Praha&#34;,&#34;player&#34;:&#34;Matej Kovár&#34;},{&#34;date&#34;:&#34;10 /09 /2023&#34;,&#34;from&#34;:&#34;Brighton &amp; Hove Albion&#34;,&#34;time&#34;:&#34;01h33&#34;,&#34;to&#34;:&#34;Standard Liège&#34;,&#34;player&#34;:&#34;Steven Alzate&#34;},{&#34;date&#34;:&#34;10 /09 /2023&#34;,&#34;from&#34;:&#34;Fulham&#34;,&#34;time&#34;:&#34;01h20&#34;,&#34;to&#34;:&#34;Standard Liège&#34;,&#34;player&#34;:&#34;Marlon Fossey&#34;},{&#34;date&#34;:&#34;09 /09 /2023&#34;,&#34;from&#34;:&#34;West Ham&#34;,&#34;time&#34;:&#34;12h10&#34;,&#34;to&#34;:&#34;Birmingham City&#34;,&#34;player&#34;:&#34;Emmanuel Longelo&#34;},{&#34;date&#34;:&#34;09 /09 /2023&#34;,&#34;from&#34;:&#34;Liverpool&#34;,&#34;time&#34;:&#34;00h00&#34;,&#34;to&#34;:&#34;Newcastle&#34;,&#34;player&#34;:&#34;Loris Karius&#34;},{&#34;date&#34;:&#34;08 /09 /2023&#34;,&#34;from&#34;:&#34;Southampton&#34;,&#34;time&#34;:&#34;15h05&#34;,&#34;to&#34;:&#34;Besiktas&#34;,&#34;player&#34;:&#34;Nathan Redmond&#34;},{&#34;date&#34;:&#34;08 /09 /2023&#34;,&#34;from&#34;:&#34;Norwich City&#34;,&#34;time&#34;:&#34;10h45&#34;,&#34;to&#34;:&#34;Galatasaray&#34;,&#34;player&#34;:&#34;Milot Rashica&#34;},{&#34;date&#34;:&#34;08 /09 /2023&#34;,&#34;from&#34;:&#34;Fulham&#34;,&#34;time&#34;:&#34;09h28&#34;,&#34;to&#34;:&#34;Alanyaspor&#34;,&#34;player&#34;:&#34;Ivan Cavaleiro&#34;},{&#34;date&#34;:&#34;08 /09 /2023&#34;,&#34;from&#34;:&#34;Manchester United&#34;,&#34;time&#34;:&#34;01h18&#34;,&#34;to&#34;:&#34;Galatasaray&#34;,&#34;player&#34;:&#34;Juan Mata&#34;},{&#34;date&#34;:&#34;07 /09 /2023&#34;,&#34;from&#34;:&#34;Villarreal&#34;,&#34;time&#34;:&#34;20h09&#34;,&#34;to&#34;:&#34;Nottingham Forest&#34;,&#34;player&#34;:&#34;Sèrge Aurier&#34;},{&#34;date&#34;:&#34;06 /09 /2023&#34;,&#34;from&#34;:&#34;Leicester City&#34;,&#34;time&#34;:&#34;16h58&#34;,&#34;to&#34;:&#34;Feyenoord&#34;,&#34;player&#34;:&#34;Esmee de Graaf&#34;},{&#34;date&#34;:&#34;06 /09 /2023&#34;,&#34;from&#34;:&#34;BK Hacken&#34;,&#34;time&#34;:&#34;15h26&#34;,&#34;to&#34;:&#34;Reading&#34;,&#34;player&#34;:&#34;Jacqueline Burns&#34;},{&#34;date&#34;:&#34;05 /09 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;18h16&#34;,&#34;to&#34;:&#34;Scarborough Athletic&#34;,&#34;player&#34;:&#34;Hassan Ayari&#34;},{&#34;date&#34;:&#34;05 /09 /2023&#34;,&#34;from&#34;:&#34;Vitória SC&#34;,&#34;time&#34;:&#34;16h00&#34;,&#34;to&#34;:&#34;Walsall&#34;,&#34;player&#34;:&#34;Jacob Maddox&#34;},{&#34;date&#34;:&#34;05 /09 /2023&#34;,&#34;from&#34;:&#34;Arsenal&#34;,&#34;time&#34;:&#34;15h05&#34;,&#34;to&#34;:&#34;Bromley FC&#34;,&#34;player&#34;:&#34;Tom Smith&#34;},{&#34;date&#34;:&#34;04 /09 /2023&#34;,&#34;from&#34;:&#34;Southampton&#34;,&#34;time&#34;:&#34;19h22&#34;,&#34;to&#34;:&#34;Woking&#34;,&#34;player&#34;:&#34;Jake Vokins&#34;},{&#34;date&#34;:&#34;03 /09 /2023&#34;,&#34;from&#34;:&#34;Aston Villa&#34;,&#34;time&#34;:&#34;22h26&#34;,&#34;to&#34;:&#34;Barnet&#34;,&#34;player&#34;:&#34;Dominic Revan&#34;},{&#34;date&#34;:&#34;03 /09 /2023&#34;,&#34;from&#34;:&#34;Arsenal&#34;,&#34;time&#34;:&#34;22h25&#34;,&#34;to&#34;:&#34;Chesterfield&#34;,&#34;player&#34;:&#34;Tim Akinola&#34;},{&#34;date&#34;:&#34;03 /09 /2023&#34;,&#34;from&#34;:&#34;Aston Villa&#34;,&#34;time&#34;:&#34;15h55&#34;,&#34;to&#34;:&#34;Bradford City&#34;,&#34;player&#34;:&#34;Tyreik Wright&#34;},{&#34;date&#34;:&#34;03 /09 /2023&#34;,&#34;from&#34;:&#34;Sheffield United&#34;,&#34;time&#34;:&#34;15h09&#34;,&#34;to&#34;:&#34;Derby County&#34;,&#34;player&#34;:&#34;Will Osula&#34;},{&#34;date&#34;:&#34;03 /09 /2023&#34;,&#34;from&#34;:&#34;Aston Villa&#34;,&#34;time&#34;:&#34;14h59&#34;,&#34;to&#34;:&#34;Crawley Town&#34;,&#34;player&#34;:&#34;Caleb Chukwuemeka&#34;}] .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/10/02/api.html",
            "relUrl": "/2022/10/02/api.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "I am doing FRQ 2020 2",
            "content": "Code Explanation Part A and B . Part A . -The variable counter is created in order to be a placeholder for the leap years . -The for loop iterates through every year from year 1 to 2 and the isLeap method is called with the year -The if statement is a conditional to determine if the year is a leap year -If it is a leap year the counter will increment and is returned on the last line . Part B . -The firstday is able to give in integer whc specifies the date -The dayYear gives the date the day is on -firstDay is used to store the year and day of the year . Modulus 7 ensures that the values are within the days of the week index (7 days in a week) | . public static int numberOfLeaps(int year1, int year2) { int counter = 0; for(int i = year1; i&lt;= year2; i++) { if(isLeap(i)){ counter++; } } return counter; } public static int dayWeek(int month, int day, int year) { int day = firstDayofYear(year); day += (dayYear(month, day, year)-1); return day % 7 } . | public static int numberOfLeaps(int year1, int) { &lt;identifier&gt; expected .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/09/19/frq.html",
            "relUrl": "/2022/09/19/frq.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Title",
            "content": "Making storytelling for hairstages after haircuts . import java.util.Scanner; class HairStages { String [][] haircuts; String [] barber; //have to make a constructor to initialize the array using public public HairStages() { haircuts = new String[][]{ //hairstage 1 long hair { &quot;..-.._&quot;, &quot;.-&#39; `-.&quot;, &quot;| _...._ |&quot; , &quot;| | __ __ | |&quot;, &quot;| | |o_Y_o| | |&quot;, &quot;| | (___) | |&quot;, &quot; | .#####. |/&quot;, &quot; | # ___ # |&quot;, &quot; &#39;.# #.&#39;&quot;, &quot;J&#39;#####&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot; .s$$- &quot; &quot; &quot;-$$s.&quot;, &quot; $$&#39; __ __ &#39;$$&quot;, &quot; $$ Lo_Y_oJ $$&quot;, &quot; ($ (___) $)&quot;, &quot; | |&quot;, &quot; | ___ |&quot;, &quot; &#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot; _.-&#39; `-._&quot; }, { &quot; !!!!!&quot;, &quot; .!!!!!.&quot;, &quot;&#39; __ __ &#39;&quot;, &quot; | Lo_Y_oJ |&quot;, &quot; (, (___) ,)&quot;, &quot;| |&quot;, &quot;| ___ |&quot;, &quot; /&quot;, &quot;_J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot; ,c???????c,&quot;, &quot; ?? __ __ ??&quot;, &quot; | (o_|_o) |&quot;, &quot; (, (___) ,)&quot;, &quot; | |&quot;, &quot; | |&quot;, &quot; &#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot;.- &quot; &quot; &quot;-.&quot;, &quot;&#39; __ __ &#39;&quot;, &quot; | (o_|_o) |&quot;, &quot;(, (___) ,)&quot;, &quot;| |&quot;, &quot;| .___. |&quot;, &quot;&#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; } }; barber = new String [] { &quot; ,/&#39;&quot;, &quot; (_). ,/&#39;&quot;, &quot; _ ::&quot;, &quot; (_)&#39; ` .&quot;, &quot; ` .&quot;, }; } public void printHaircuts(int numberOfHairCuts) { for(int i=0; i &lt; numberOfHairCuts; i++) { for(int j=0; j &lt; haircuts[i].length; j++){ System.out.println(haircuts[i][j]); } } } public void printBarber() { for(int i=0; i&lt;barber.length; i++){ System.out.println(barber[i]); } } } . HairStages newObject = new HairStages(); newObject.printHaircuts(1); Scanner myObj = new Scanner(System.in); newObject.printBarber(); . ..-.._ .-&#39; `-. | _...._ | | | __ __ | | | | |o_Y_o| | | | | (___) | | | .#####. |/ | # ___ # | &#39;.# #.&#39; J&#39;#####&#39;L_ _.-&#39; `-._ ,/&#39; (_). ,/&#39; _ :: (_)&#39; ` . ` . .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/09/13/codeforarray.html",
            "relUrl": "/2022/09/13/codeforarray.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "If statements / Gratitude . if statements . Deployed Website . Link to deployed website .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/markdown/2022/09/11/Week3.html",
            "relUrl": "/markdown/2022/09/11/Week3.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "If Else Assignment",
            "content": "The code on the bottom displays a boolean conditional which is true . I begin by importing the scanner in order to allow myself to use the user input. After I am able to use the scanner properties I create a variable called number score which is set equal to the user&#39;s scpre that they input. Following this, I create an if else statement with a conditional that states if the users inputted score is greater than or equal to 90, they have receieved an A under Mr. Mortensen&#39;s grading. The else if is an alternate for if this condition is not met and makes the conditional if the users input is greater than equal to 80 but less than 90 then they have received a B. Likewise using the same logic I am able to the same for the rest of my conditions continuing down to if all the if and else if conditionals are not met then the else means that they receievd an F. . System.out.print(&quot;hello&quot;); . hello . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input int numberScore = scanner.nextInt(); System.out.println(numberScore); if (numberScore &gt;= 90) { System.out.print(&quot;You went above and beyond Hey Hey Hey you got an A :) &quot;); } else if (numberScore &gt;= 80 &amp;&amp; numberScore&lt; 90) { System.out.print(&quot;You did what you were supposed to so B&quot;); } else if (numberScore &gt;= 70 &amp;&amp; numberScore &lt; 80) { System.out.print(&quot;Stop messing around this is lower than average C&quot;); } else if (numberScore &gt;= 60 &amp;&amp; numberScore &lt; 70) { System.out.print(&quot;You literally wrote a line of code D&quot;); } else { System.out.print(&quot;You literally did nothing thats the only way possible F&quot;); } . 2 You literally did nothing thats the only way possible F . In this code segment, I once again imported the scanner, however this time I added a print statement as a way to give clear directions for the user input. I then set the keyword for 4 being the correct answer which will print congrats if it is correct. The switch case just makes it so that it identifies the variable of input so I don&#39;t have to repeat it over and over again. The case is essntially the contitional and the print is the result of whether the user input matches up with the statement. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input System.out.print(&quot;Pick a number 1-5 if you guess it right then you will be congratualeted &quot;); int numberScore = scanner.nextInt(); System.out.println(numberScore); switch(numberScore) { case 1: System.out.print(&quot;Wrong Number&quot;); break; case 2: System.out.print(&quot;Wrong Number&quot;); break; case 3: System.out.print(&quot;Wrong Number&quot;); break; case 4: System.out.print(&quot;Congrats!&quot;); break; case 5: System.out.print(&quot;Wrong Number&quot;); break; } . Jupyter cannot be started. Error attempting to locate Jupyter: Select an Interpreter to start Jupyter Run the following command to install &#39;jupyter and notebook&#39; into the Python environment. Command: &#39;python -m pip install jupyter notebook -U or conda install jupyter notebook -U&#39; Click &lt;a href=&#39;https://aka.ms/installJupyterForVSCode&#39;&gt;here&lt;/a&gt; for more info. . Demorgans Law is essntially a form of code where you can use the ! or the not operator in a conditional. If there is a not outside the boolean expression it distributes and makes all the signs and values the opposite of what it normally is. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input System.out.print(&quot;Pick a number greater than or equal to 90 to see the law in action&quot;); int numberScore = scanner.nextInt(); System.out.println(numberScore); if (!(numberScore &gt;= 90)) { System.out.print(&quot;You went above and beyond Hey Hey Hey you got an A :) &quot;); } else { System.out.print(&quot;See I told you&quot;); } . Pick a number greater than or equal to 90 to see the law in action103 See I told you . As you can see by adding the ! it created the inverse of the conditional meaning that the boolean changed from &gt;= 90 to &lt;= 90. As a result of this when we were asked to put a number 90 or greater the conditional was false and skipped to the else statement. . Grateful and Gratitude . How i see it is that most of us in the class have the pleasure of being able to eat three meals a day. The little things we do complain about are so minuscule that in the larger scale of things they mean literally nothing. If something goes bad for you, you need to really think is it really worth getting this sad over. And even if it is put your head up and and get up. Resilience and Relentlessness are the two factors which differentiate success from people who are not. i am grateful that I am even in a school which offers APCSA. The classroom and resources provided to us are more than enough to help us ready for college level classes and real world jobs. Additionally, I am thankful for my accomplishments in soccer, such as making the top levels of ECNL, USSDA, and Varsity. Additionally we have won CIF divison 1 soccer, which was purely the product of our relentless team spirit and refusal to give up even when all odds were against us. But the greatest thing about winning against all odds is the satisfaction. No one likes an easy win, we are supposed to struggle. Believe me the end reward is amazing, which is why no matter what the goal is, you need to persevere and put your all into it. . Video Note . -Your expectations will always be met with reality . -Even if these expectations are not met do not get discouraged and see it as an opportunity to learn . — Keep your mind in the present, as going to far into the past or future will only discourage or stress you out . Happiness is a mindset therefore you technically have full control of when you are happy or not Have a positive outlook on things and you will be happy even in a bad circumstances . Goals for this year . I am going to have mastery in Java and python before I go to college I will establish a routine of hard work and discipline and will be fully consistent with it by November I will win another CIF championship I will get out of my comfort zone and talk to people I never have before I will try to be as optimistic as I can no matter if I am having a bad day or not .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/jupyter/2022/09/10/ifelse.html",
            "relUrl": "/jupyter/2022/09/10/ifelse.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jaymanjrekar.github.io/jaysfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jaymanjrekar.github.io/jaysfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}