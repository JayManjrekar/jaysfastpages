{
  
    
        "post0": {
            "title": "Fibonacci",
            "content": "abstract class Parentfib { public void print(int count){ int[] fibNumbers = getfib(count); for(int i =0; i&lt;fibNumbers.length; i++){ System.out.println(fibNumbers[i]); } } abstract int[] getfib(int count); } . Recursion Loop . class Recurfib extends Parentfib{ public int[] getfib(int count){ } public static void main(String args[]){ int count=20; System.out.print(n1+&quot; &quot;+n2);//printing 0 and 1 printFibonacci(count-2);//n-2 because 2 numbers are already printed } } . For Loop . class forFib extends Parentfib{ int[] getfib(int count) { int[] fibonacciNumbers = new int[count+1]; int firstTerm = 0, secondTerm = 1; for (int i = 1; i &lt;= count; ++i) { // compute the next term int nextTerm = firstTerm + secondTerm; firstTerm = secondTerm; secondTerm = nextTerm; fibonacciNumbers[i] = firstTerm; } return fibonacciNumbers; } public static void main(){ forFib fibo = new forFib(); fibo.print(10); } } forFib.main(); . 0 1 1 2 3 5 8 13 21 34 55 . While Loop . class Greatlearning { // Function to print N Fibonacci Number static void Fibonacci(int N) { int num1 = 0, num2 = 1; int counter = 0; // Iterate till counter is N while (counter &lt; N) { // Print the number System.out.print(num1 + &quot; &quot;); // Swap int num3 = num2 + num1; num1 = num2; num2 = num3; counter = counter + 1; } } // Driver Code public static void main(String args[]) { // Given Number N int N = 18; // Function Call Fibonacci(N); } } .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/09/26/09-26-fibonacci.html",
            "relUrl": "/2022/09/26/09-26-fibonacci.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "I am doing FRQ 2020 2",
            "content": "Code Explanation Part A and B . Part A . -The variable counter is created in order to be a placeholder for the leap years . -The for loop iterates through every year from year 1 to 2 and the isLeap method is called with the year -The if statement is a conditional to determine if the year is a leap year -If it is a leap year the counter will increment and is returned on the last line . Part B . -The firstday is able to give in integer whc specifies the date -The dayYear gives the date the day is on -firstDay is used to store the year and day of the year . Modulus 7 ensures that the values are within the days of the week index (7 days in a week) | . public static int numberOfLeaps(int year1, int year2) { int counter = 0; for(int i = year1; i&lt;= year2; i++) { if(isLeap(i)){ counter++; } } return counter; } public static int dayWeek(int month, int day, int year) { int day = firstDayofYear(year); day += (dayYear(month, day, year)-1); return day % 7 } . | public static int numberOfLeaps(int year1, int) { &lt;identifier&gt; expected .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/09/19/frq.html",
            "relUrl": "/2022/09/19/frq.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "Making storytelling for hairstages after haircuts . import java.util.Scanner; class HairStages { String [][] haircuts; String [] barber; //have to make a constructor to initialize the array using public public HairStages() { haircuts = new String[][]{ //hairstage 1 long hair { &quot;..-.._&quot;, &quot;.-&#39; `-.&quot;, &quot;| _...._ |&quot; , &quot;| | __ __ | |&quot;, &quot;| | |o_Y_o| | |&quot;, &quot;| | (___) | |&quot;, &quot; | .#####. |/&quot;, &quot; | # ___ # |&quot;, &quot; &#39;.# #.&#39;&quot;, &quot;J&#39;#####&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot; .s$$- &quot; &quot; &quot;-$$s.&quot;, &quot; $$&#39; __ __ &#39;$$&quot;, &quot; $$ Lo_Y_oJ $$&quot;, &quot; ($ (___) $)&quot;, &quot; | |&quot;, &quot; | ___ |&quot;, &quot; &#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot; _.-&#39; `-._&quot; }, { &quot; !!!!!&quot;, &quot; .!!!!!.&quot;, &quot;&#39; __ __ &#39;&quot;, &quot; | Lo_Y_oJ |&quot;, &quot; (, (___) ,)&quot;, &quot;| |&quot;, &quot;| ___ |&quot;, &quot; /&quot;, &quot;_J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot; ,c???????c,&quot;, &quot; ?? __ __ ??&quot;, &quot; | (o_|_o) |&quot;, &quot; (, (___) ,)&quot;, &quot; | |&quot;, &quot; | |&quot;, &quot; &#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; }, { &quot;.- &quot; &quot; &quot;-.&quot;, &quot;&#39; __ __ &#39;&quot;, &quot; | (o_|_o) |&quot;, &quot;(, (___) ,)&quot;, &quot;| |&quot;, &quot;| .___. |&quot;, &quot;&#39;. .&#39;&quot;, &quot; _J&#39;-._.-&#39;L_&quot;, &quot;_.-&#39; `-._&quot; } }; barber = new String [] { &quot; ,/&#39;&quot;, &quot; (_). ,/&#39;&quot;, &quot; _ ::&quot;, &quot; (_)&#39; ` .&quot;, &quot; ` .&quot;, }; } public void printHaircuts(int numberOfHairCuts) { for(int i=0; i &lt; numberOfHairCuts; i++) { for(int j=0; j &lt; haircuts[i].length; j++){ System.out.println(haircuts[i][j]); } } } public void printBarber() { for(int i=0; i&lt;barber.length; i++){ System.out.println(barber[i]); } } } . HairStages newObject = new HairStages(); newObject.printHaircuts(1); Scanner myObj = new Scanner(System.in); newObject.printBarber(); . ..-.._ .-&#39; `-. | _...._ | | | __ __ | | | | |o_Y_o| | | | | (___) | | | .#####. |/ | # ___ # | &#39;.# #.&#39; J&#39;#####&#39;L_ _.-&#39; `-._ ,/&#39; (_). ,/&#39; _ :: (_)&#39; ` . ` . .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/2022/09/13/codeforarray.html",
            "relUrl": "/2022/09/13/codeforarray.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "If statements / Gratitude . if statements . Deployed Website . Link to deployed website .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/markdown/2022/09/11/Week3.html",
            "relUrl": "/markdown/2022/09/11/Week3.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "If Else Assignment",
            "content": "The code on the bottom displays a boolean conditional which is true . I begin by importing the scanner in order to allow myself to use the user input. After I am able to use the scanner properties I create a variable called number score which is set equal to the user&#39;s scpre that they input. Following this, I create an if else statement with a conditional that states if the users inputted score is greater than or equal to 90, they have receieved an A under Mr. Mortensen&#39;s grading. The else if is an alternate for if this condition is not met and makes the conditional if the users input is greater than equal to 80 but less than 90 then they have received a B. Likewise using the same logic I am able to the same for the rest of my conditions continuing down to if all the if and else if conditionals are not met then the else means that they receievd an F. . System.out.print(&quot;hello&quot;); . hello . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input int numberScore = scanner.nextInt(); System.out.println(numberScore); if (numberScore &gt;= 90) { System.out.print(&quot;You went above and beyond Hey Hey Hey you got an A :) &quot;); } else if (numberScore &gt;= 80 &amp;&amp; numberScore&lt; 90) { System.out.print(&quot;You did what you were supposed to so B&quot;); } else if (numberScore &gt;= 70 &amp;&amp; numberScore &lt; 80) { System.out.print(&quot;Stop messing around this is lower than average C&quot;); } else if (numberScore &gt;= 60 &amp;&amp; numberScore &lt; 70) { System.out.print(&quot;You literally wrote a line of code D&quot;); } else { System.out.print(&quot;You literally did nothing thats the only way possible F&quot;); } . 2 You literally did nothing thats the only way possible F . In this code segment, I once again imported the scanner, however this time I added a print statement as a way to give clear directions for the user input. I then set the keyword for 4 being the correct answer which will print congrats if it is correct. The switch case just makes it so that it identifies the variable of input so I don&#39;t have to repeat it over and over again. The case is essntially the contitional and the print is the result of whether the user input matches up with the statement. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input System.out.print(&quot;Pick a number 1-5 if you guess it right then you will be congratualeted &quot;); int numberScore = scanner.nextInt(); System.out.println(numberScore); switch(numberScore) { case 1: System.out.print(&quot;Wrong Number&quot;); break; case 2: System.out.print(&quot;Wrong Number&quot;); break; case 3: System.out.print(&quot;Wrong Number&quot;); break; case 4: System.out.print(&quot;Congrats!&quot;); break; case 5: System.out.print(&quot;Wrong Number&quot;); break; } . Jupyter cannot be started. Error attempting to locate Jupyter: Select an Interpreter to start Jupyter Run the following command to install &#39;jupyter and notebook&#39; into the Python environment. Command: &#39;python -m pip install jupyter notebook -U or conda install jupyter notebook -U&#39; Click &lt;a href=&#39;https://aka.ms/installJupyterForVSCode&#39;&gt;here&lt;/a&gt; for more info. . Demorgans Law is essntially a form of code where you can use the ! or the not operator in a conditional. If there is a not outside the boolean expression it distributes and makes all the signs and values the opposite of what it normally is. . import java.util.Scanner; Scanner scanner = new Scanner(System.in); //numberScore variable is equal to the user input System.out.print(&quot;Pick a number greater than or equal to 90 to see the law in action&quot;); int numberScore = scanner.nextInt(); System.out.println(numberScore); if (!(numberScore &gt;= 90)) { System.out.print(&quot;You went above and beyond Hey Hey Hey you got an A :) &quot;); } else { System.out.print(&quot;See I told you&quot;); } . Pick a number greater than or equal to 90 to see the law in action103 See I told you . As you can see by adding the ! it created the inverse of the conditional meaning that the boolean changed from &gt;= 90 to &lt;= 90. As a result of this when we were asked to put a number 90 or greater the conditional was false and skipped to the else statement. . Grateful and Gratitude . How i see it is that most of us in the class have the pleasure of being able to eat three meals a day. The little things we do complain about are so minuscule that in the larger scale of things they mean literally nothing. If something goes bad for you, you need to really think is it really worth getting this sad over. And even if it is put your head up and and get up. Resilience and Relentlessness are the two factors which differentiate success from people who are not. i am grateful that I am even in a school which offers APCSA. The classroom and resources provided to us are more than enough to help us ready for college level classes and real world jobs. Additionally, I am thankful for my accomplishments in soccer, such as making the top levels of ECNL, USSDA, and Varsity. Additionally we have won CIF divison 1 soccer, which was purely the product of our relentless team spirit and refusal to give up even when all odds were against us. But the greatest thing about winning against all odds is the satisfaction. No one likes an easy win, we are supposed to struggle. Believe me the end reward is amazing, which is why no matter what the goal is, you need to persevere and put your all into it. . Video Note . -Your expectations will always be met with reality . -Even if these expectations are not met do not get discouraged and see it as an opportunity to learn . — Keep your mind in the present, as going to far into the past or future will only discourage or stress you out . Happiness is a mindset therefore you technically have full control of when you are happy or not Have a positive outlook on things and you will be happy even in a bad circumstances . Goals for this year . I am going to have mastery in Java and python before I go to college I will establish a routine of hard work and discipline and will be fully consistent with it by November I will win another CIF championship I will get out of my comfort zone and talk to people I never have before I will try to be as optimistic as I can no matter if I am having a bad day or not .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/jupyter/2022/09/10/ifelse.html",
            "relUrl": "/jupyter/2022/09/10/ifelse.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jaymanjrekar.github.io/jaysfastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jaymanjrekar.github.io/jaysfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jaymanjrekar.github.io/jaysfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}